{"config":{"lang":["en","ru"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Library for TrueConf Chatbot Connector","text":"<p>Welcome to the documentation of python-trueconf-bot \u2014 a library that allows you to create and manage chatbots for the TrueConf platform using WebSocket and asyncio.</p> <p>This library is designed to simplify the development of chatbots by providing ready-made tools for connecting, processing incoming events, and sending responses. With it, you can create bots for automating tasks, integrating with external services, and enhancing communication within your organization.</p>"},{"location":"#key-features","title":"Key features","text":"<ul> <li>Asynchronous operation using asyncio</li> <li>Support for WebSocket connections</li> <li>Convenient routing of incoming messages</li> <li>Built-in filters for processing different types of updates</li> <li>Easy integration with external Python libraries</li> </ul>"},{"location":"#installation","title":"Installation","text":""},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.10+</li> <li>Installed dependencies: <code>websockets</code>, <code>httpx</code>, <code>mashumaro</code>, <code>pillow</code>, <code>aiofiles</code>, <code>magic-filter</code></li> <li>It is recommended to use virtualenv or poetry for dependency isolation.</li> </ul>"},{"location":"#installation-using-pip","title":"Installation using pip","text":"<pre><code>pip install git+https://github.com/TrueConf/python-trueconf-bot\n</code></pre>"},{"location":"#comparison-with-aiogram","title":"Comparison with aiogram","text":"Feature aiogram (Telegram) python-trueconf-bot (TrueConf) Asynchronous asyncio asyncio Routing decorators <code>@router.message(...)</code> <code>@router.message(...)</code> Message filtering <code>F.text</code>, <code>F.photo</code>, <code>F.document</code> <code>F.text</code>, <code>F.photo</code>, <code>F.document</code> Magic-filter \u2705 \u2705 Aliases (shortcuts) <code>message.answer()</code>, <code>message.reply()</code> <code>message.answer()</code>, <code>message.reply()</code> Bot initialization <code>Bot(token=\"...\")</code> <code>Bot(server, token=\"...\")</code> or <code>Bot.from_credentials(server, login, password)</code> JSON \u2192 Python Pydantic models Mashumaro dataclasses Transport HTTPS + long polling / webhook Asynchronous WebSocket Working with files <code>bot.get_file(...)</code> + <code>bot.download_file(...)</code> <code>message.photo.download()</code>, <code>message.document.download()</code>, <code>bot.download_file_by_id(...)</code>"},{"location":"features/","title":"Features","text":""},{"location":"features/#asyncio-based-asynchronous-architecture","title":"Asyncio-based Asynchronous Architecture","text":"<p>The entire system is built using async/await, ensuring high performance and non-blocking operations.</p>"},{"location":"features/#familiar-aiogram-like-design","title":"Familiar aiogram-like Design","text":"<p>Leverages familiar concepts: Router, decorators, shortcuts like message.answer, message.reply, filters, and even magic-filter (F.text, F.document, F.photo).</p>"},{"location":"features/#convenient-handling-of-incoming-events","title":"Convenient Handling of Incoming Events","text":"<p>All incoming JSON payloads are automatically transformed into Python classes (Message, AttachmentContent, UploadingProgress, etc.), making data handling simple and type-safe.</p>"},{"location":"features/#decorators-for-routing","title":"Decorators for Routing","text":"<p>The router enables elegant and structured handling of events:</p> <pre><code>from trueconf import Router, Message\nfrom trueconf.enums import MessageType\nfrom trueconf.filters import F\n\nrouter = Router()\n\n@router.message(F.text.startswith(\"/start\"))\nasync def on_start(msg: Message):\n  await msg.answer(\"Hello! I'm TrueConf bot \ud83d\udc4b\")\n\n@router.message(F.document.mime_type == \"application/pdf\")\nasync def on_pdf(msg: Message):\n  await msg.reply(\"Thanks for the PDF!\")\n</code></pre>"},{"location":"features/#two-connection-options","title":"Two Connection Options","text":"<ol> <li>Using a pre-obtained JWT token:</li> </ol> <pre><code>bot = Bot(server=\"video.example.com\", token=\"...\")\n</code></pre> <ol> <li>Or via login and password authentication:</li> </ol> <pre><code>bot = Bot.from_credentials(server, username, password)\n</code></pre>"},{"location":"features/#aliases-and-shortcuts-in-aiogram-style","title":"Aliases and Shortcuts in aiogram Style","text":"<p>Common methods are available for messages:</p> <pre><code>await msg.answer(\"Text to chat\")\nawait msg.reply(\"Reply to a message\")\nawait msg.copy_to(chat_id=\"other_chat\")\n</code></pre>"},{"location":"features/#multi-bot-support","title":"Multi-Bot Support","text":"<p>You can run multiple bots simultaneously and route events separately for each one.</p>"},{"location":"features/#asynchronous-transport-websocket","title":"Asynchronous Transport \u2014 WebSocket","text":"<p>All communication with the server is handled via WebSocket, which is faster and more efficient than traditional REST requests.</p>"},{"location":"features/#magic-filter-just-like-in-aiogram","title":"Magic-filter, Just Like in aiogram","text":"<p>Exactly the same as in aiogram:</p> <pre><code>@router.message(F.photo)\nasync def on_photo(msg: Message): ...\n\n@router.message(F.document.mime_type.in_([\"application/pdf\", \"application/msword\"]))\nasync def on_doc(msg: Message): ...\n</code></pre>"},{"location":"features/#files-and-uploads","title":"Files and Uploads","text":"<p>Asynchronous file upload and download are supported. Files can be downloaded to a temporary directory or a specified path.</p> <pre><code>path = await bot.download_file_by_id(file_id)\nawait msg.answer(f\"File downloaded to {path}\")\n</code></pre>"},{"location":"features/#full-set-of-public-api-methods","title":"Full Set of Public API Methods","text":"<p>The library implements all core TrueConf API methods: sending messages, uploading/downloading files, polls, conferences, participant management, and more.</p>"},{"location":"examples/echo_bot/","title":"Echo bot","text":"<pre><code>import asyncio\nfrom trueconf import Bot, Dispatcher, Router, Message, F, ParseMode\nfrom os import getenv\n\nrouter = Router()\ndp = Dispatcher()\ndp.include_router(router)\n\nTOKEN = getenv(\"TOKEN\")\n\nbot = Bot(server=\"video.example.com\", token=TOKEN, dispatcher=dp)\n\n\n@router.message(F.text)\nasync def echo(msg: Message):\n    await msg.answer(f\"You says: **{msg.text}**\", parse_mode=ParseMode.MARKDOWN)\n\n\nasync def main():\n    await bot.run()\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"examples/multibot/","title":"Multibot","text":"<p>The TrueConf team has prepared an example that demonstrates the use of four bots at once (all-in-one):</p> <ul> <li>Echo bot</li> <li>Sick-leave bot that forwards messages to an HR group</li> <li>Monitoring bot for external service statistics (TrueConf Server)</li> <li>GPT bot that runs a local LLM model in the background</li> </ul> <p>View repository </p>"},{"location":"learn/enums/","title":"Using enumerations","text":"<p>In the python-trueconf-bot library, many method parameters and object fields are defined through enums (enumerations). This is done for developer convenience and to avoid errors caused by using \"magic strings\" or numeric codes.</p> <p>You can import all enums at once:</p> <pre><code>from trueconf.enums import *\n</code></pre> <p>Or import only the ones you need:</p> <pre><code>from trueconf.enums import ParseMode, FileReadyState\n</code></pre>"},{"location":"learn/enums/#usage-examples","title":"Usage examples","text":""},{"location":"learn/enums/#text-formatting","title":"Text formatting","text":"<pre><code>from trueconf.enums import ParseMode\n\nawait message.answer(\n    \"Hello, *world*!\",\n    parse_mode=ParseMode.MARKDOWN\n)\n</code></pre> <p>Instead of manually typing the string <code>\"Markdown\"</code>, you use <code>ParseMode.MARKDOWN</code>.</p>"},{"location":"learn/enums/#working-with-files","title":"Working with files","text":"<pre><code>from trueconf.enums import FileReadyState\n\ninfo = await bot.get_file_info(file_id=\"abc123\")\n\nif info.ready_state == FileReadyState.READY:\n    await bot.download_file_by_id(info.file_id, \"./downloads\")\nelif info.ready_state == FileReadyState.NOT_AVAILABLE:\n    print(\"File is not available\")\n</code></pre>"},{"location":"learn/enums/#chat-types","title":"Chat types","text":"<pre><code>from trueconf.enums import ChatType\n\nif chat.chat_type == ChatType.GROUP:\n    await message.answer(\"This is a group chat\")\n</code></pre> <p>Thus, <code>enums</code> help you write cleaner and safer code.</p>"},{"location":"learn/filters/","title":"Filters","text":"<p>Filters are essential for routing updates to specific handlers. Handler lookup always stops at the first match with a set of filters. By default, all handlers have an empty filter set, so all updates will be passed to the first handler without filters.</p> <p>Tip</p> <p>Our filters, just like in aiogram, are built on the magic-filter library.</p>"},{"location":"learn/filters/#combining-filters","title":"Combining Filters","text":"<p>If you specify multiple filters in sequence, they will be checked with an \"AND\" condition:</p> <pre><code>@&lt;router&gt;.message(F.from_user.id == \"bots_ru@video.example.com\", F.text == 'admin')\n</code></pre> <p>Additionally, if you want to use two alternative ways to trigger the same handler (an \"OR\" condition), you can register the handler two or more times as needed:</p> <pre><code>@&lt;router&gt;.message(F.text == \"hi\")\n@&lt;router&gt;.message(Command(\"/start\"))\n</code></pre>"},{"location":"learn/filters/#magicfilter","title":"MagicFilter","text":"<p>MagicFilter is a powerful and flexible tool from the <code>magic-filter</code> package, integrated into python-trueconf-bot. It allows you to build expressive and chainable filters that simplify message routing in your bot. Instead of manually checking update fields inside a handler, you can define conditions directly in the decorator.</p> <p>The filter works \"lazily\": when a handler is declared, only the chain of checks is stored, not the result. The actual evaluation happens only when a new event arrives, so filters can be easily combined and remain readable. This approach makes the code shorter and clearer, showing exactly which updates will be processed by a given handler.</p> <p>The idea behind MagicFilter is simple: describe an attribute chain and a condition, then apply it to an object. Imagine you have an object with nested fields. Instead of manually checking something like <code>if obj.foo.bar.baz == \"spam\": ...</code>, you can construct the filter declaratively:</p> <pre><code>F.foo.bar.baz == \"spam\"\n</code></pre> <p>The resulting filter is not an immediate check, but an object that \"remembers\" the condition. When processing an update, this filter is automatically applied to the object (the router handles the check under the hood). Technically, the <code>.resolve(obj)</code> method is used for this, but you don't need to call it manually \u2014 just define the condition in the decorator, and it will be executed during routing.</p> <pre><code>@r.message(F.text == \"ping\")\nasync def ping_handler(message):\n    await message.answer(\"pong\")\n</code></pre> <p>Here, the filter <code>F.text == \"ping\"</code> will be automatically checked for each incoming message. If the condition matches, the handler will be triggered.</p>"},{"location":"learn/filters/#available-operations","title":"Available Operations","text":"<p>The MagicFilter object supports basic logical operations on object attributes.</p>"},{"location":"learn/filters/#existence-or-not-none","title":"Existence or not None","text":"<p>Default behavior:</p> <pre><code>F.photo  # lambda message: message.photo\n</code></pre>"},{"location":"learn/filters/#equality","title":"Equality","text":"<pre><code>F.text == \"hello\"        # lambda message: message.text == \"hello\"\nF.from_user.id == 42     # lambda message: message.from_user.id == 42\nF.text != \"spam\"         # lambda message: message.text != \"spam\"\n</code></pre>"},{"location":"learn/filters/#membership","title":"Membership","text":"<pre><code># lambda query: query.from_user.id in {42, 1000, 123123}\nF.from_user.id.in_({42, 1000, 123123})  \n\n# lambda query: query.data in {\"foo\", \"bar\", \"baz\"}\nF.data.in_({\"foo\", \"bar\", \"baz\"})       \n</code></pre>"},{"location":"learn/filters/#contains","title":"Contains","text":"<pre><code>F.text.contains(\"foo\")  # lambda message: \"foo\" in message.text\n</code></pre>"},{"location":"learn/filters/#startsends-with","title":"Starts/Ends With","text":"<pre><code>F.text.startswith(\"foo\")  # lambda message: message.text.startswith(\"foo\")\nF.text.endswith(\"bar\")    # lambda message: message.text.endswith(\"bar\")\n</code></pre>"},{"location":"learn/filters/#regular-expressions","title":"Regular Expressions","text":"<pre><code>F.text.regexp(r\"Hello, .+\")  # lambda message: re.match(r\"Hello, .+\", message.text)\n</code></pre>"},{"location":"learn/filters/#custom-function","title":"Custom Function","text":"<pre><code># lambda message: (lambda chat: chat.id == -42)(message.chat)\nF.chat.func(lambda chat: chat.id == -42)  \n</code></pre>"},{"location":"learn/filters/#result-inversion","title":"Result Inversion","text":"<pre><code># lambda message: not message.text\n~F.text        \n\n# lambda message: not message.text.startswith(\"spam\")\n~F.text.startswith(\"spam\")  \n</code></pre>"},{"location":"learn/filters/#condition-combination","title":"Condition Combination","text":"<pre><code>(F.from_user.id == 42) &amp; (F.text == \"admin\")\n\nF.text.startswith(\"a\") | F.text.endswith(\"b\")\n\n(F.from_user.id.in_({42, 777, 911})) &amp; (F.text.startswith(\"!\") | F.text.startswith(\"/\")) &amp; F.text.contains(\"ban\")\n</code></pre>"},{"location":"learn/filters/#attribute-modifiers-string","title":"Attribute Modifiers (String)","text":"<pre><code> # lambda message: message.text.lower() == \"test\"\nF.text.lower() == \"test\"    \n\n# lambda message: message.text.upper() in {\"FOO\", \"BAR\"}\nF.text.upper().in_({\"FOO\", \"BAR\"})\n\n # lambda message: len(message.text) == 5\nF.text.len() == 5                 \n</code></pre>"},{"location":"learn/getting-started/","title":"Getting Started","text":"<p>Before getting started, we recommend creating and activating a virtual environment to isolate your project dependencies:</p> <pre><code>python -m venv .venv\nsource .venv/bin/activate   # Linux / macOS\n.venv\\Scripts\\activate      # Windows PowerShell\n</code></pre>"},{"location":"learn/getting-started/#installing-python-trueconf-bot","title":"Installing python-trueconf-bot","text":"<p>To start working with python-trueconf-bot, install the library using one of the following methods:</p> <ol> <li>From the global PyPI repository:</li> </ol> <p><pre><code>pip install python-trueconf-bot\n</code></pre> 2. From a locally built package (.whl):</p> <pre><code>pip install python-trueconf-bot.whl\n</code></pre> <p>Info</p> <p>Upon installation, dependencies will be automatically pulled in: <code>websockets</code>, <code>httpx</code>, <code>mashumaro</code>, <code>pillow</code>, <code>aiofiles</code>, <code>magic-filter</code>.</p>"},{"location":"learn/getting-started/#creating-a-basic-echo-bot","title":"Creating a Basic Echo Bot","text":"<p>First, import the required classes:</p> <pre><code>from trueconf import Bot, Dispatcher, Router, F\nfrom trueconf.types import Message\n</code></pre> <p>Next, create instances of <code>Router</code> and <code>Dispatcher</code> and connect them:</p> <pre><code>r = Router()\ndp = Dispatcher()\n# dp.include_router(r)\n</code></pre> <p>The bot supports two types of authentication: token-based or login/password. You can choose the most convenient method.</p>"},{"location":"learn/getting-started/#token-based-authentication","title":"Token-Based Authentication","text":"<p>If you're using token-based connection, obtain the token as described in the official API documentation.</p> <p>It is recommended to store the token in an environment variable or <code>.env</code> file. Don\u2019t forget to add <code>.env</code> to <code>.gitignore</code> if working with public repositories.</p> <pre><code>from os import getenv\n\nTOKEN = getenv(\"TOKEN\")\nbot = Bot(server=\"video.example.com\", token=TOKEN, dispatcher=dp)\n</code></pre>"},{"location":"learn/getting-started/#loginpassword-authentication","title":"Login/Password Authentication","text":"<p>Use the <code>.from_credentials</code> method:</p> <pre><code>bot = Bot.from_credentials(\n    username=\"echo_bot\",\n    password=\"123tr\",\n    server=\"10.110.2.240\",\n    dispatcher=dp\n)\n</code></pre> <p>Info</p> <p>Each time from_credentials() is called, the bot requests a new token from the server. The token lifespan is 1 month.</p>"},{"location":"learn/getting-started/#message-handler","title":"Message Handler","text":"<p>Now let\u2019s create a simple handler for incoming messages. It will reply with the same text (a classic \"echo bot\"):</p> <pre><code>@r.message(F.text)\nasync def echo(message: Message):\n    await message.answer(message.text)\n</code></pre>"},{"location":"learn/getting-started/#running-the-bot","title":"Running the Bot","text":"<p>Run the bot inside an asynchronous <code>main()</code> function passed to <code>asyncio.run()</code>:</p> <pre><code>async def main():\n    await bot.run()\n\nimport asyncio\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>Why async/await?</p> <p>The python-trueconf-bot library is built on asyncio.</p> <p>This means that all network operations (connecting to the server, receiving and sending messages) are asynchronous and non-blocking. Therefore:</p> <ul> <li>handlers are written as <code>async def</code>,</li> <li>method calls use <code>await</code>,</li> <li>the launch is managed via <code>asyncio.run(...)</code>.</li> </ul> <p>This approach allows handling multiple events and messages in parallel \u2014 without delays or blocking.</p>"},{"location":"learn/parse-messages/","title":"Handling Requests","text":""},{"location":"learn/parse-messages/#router","title":"Router","text":"<p>Whenever a user interacts with the bot \u2014 for example, via a direct message, or when the bot is added to a group chat or channel \u2014 the bot receives an update from the server.</p> <p>To process these events, the <code>Router</code> is used. It defines which functions should be triggered upon receiving a specific type of update. This allows you to centrally manage the logic for handling various types of messages:</p> <pre><code>from trueconf import Router\n\nr = Router()\n</code></pre> <p>To handle an update with the <code>SendMessage</code> method, the handler function is wrapped with a decorator:</p> <pre><code>@r.message()\nasync def on_message(message): ...\n</code></pre>"},{"location":"learn/parse-messages/#filter-support","title":"Filter Support","text":"<p>Routers support filters based on the magic-filter library using the <code>F</code> object:</p> <pre><code>from trueconf import F\n</code></pre> <p>Filters allow you to process only those updates that match specific conditions. For example:</p> <pre><code># Messages that contain text\n@r.message(F.text)\nasync def on_message(message): ...\n\n# Messages that contain images\n@r.message(F.photo)\nasync def on_photo(message): ...\n\n# Messages from a specific user\n@r.message(F.from_user.id == \"elisa\")\nasync def on_elisa(message): ...\n</code></pre> <p>Tip</p> <p>You can find more detailed examples of filter usage in the Filter section.</p>"},{"location":"learn/parse-messages/#dispatcher","title":"Dispatcher","text":"<p>All created routers must be added to the dispatcher (<code>Dispatcher</code>). It combines all handlers and manages update routing:</p> <pre><code>from trueconf import Dispatcher\n\ndp = Dispatcher()\ndp.include_router(r)\n</code></pre>"},{"location":"learn/parse-messages/#handler-priorities","title":"Handler Priorities","text":"<ul> <li>Routers and their handlers are checked in the order they were added via <code>Dispatcher.include_router()</code>.</li> <li>Inside a single router, handlers are evaluated in the order they are declared.</li> <li>Upon the first filter match, the handler is executed and no further handlers are checked (default behavior).</li> </ul> <p>This means that if you have multiple handlers with the same filter:</p> <pre><code>@r.message(F.text == \"Hello\")\nasync def handler1(message):\n    await message.answer(\"First\")\n\n@r.message(F.text == \"Hello\")\nasync def handler2(message):\n    await message.answer(\"Second\")\n</code></pre> <p>Then only <code>handler1</code> will be triggered, and <code>handler2</code> will be ignored.</p> <p>To trigger both handlers, use different filters or combine the logic inside a single handler function.</p> <p>Tip</p> <p>For better logic separation, it's recommended to create multiple routers (e.g., <code>commands_router</code>, <code>messages_router</code>, <code>admin_router</code>) and include them in the dispatcher in the desired order. This helps organize your code and simplifies bot maintenance.</p>"},{"location":"learn/parse-messages/#code-organization-best-practices","title":"Code Organization Best Practices","text":"<ul> <li>Typically, routers are placed in separate modules (e.g., <code>handlers/messages.py</code>) and included in the main bot module via <code>include_router</code>.</li> <li>This helps separate handlers by responsibility: messages, photos, commands, etc.</li> <li>The dispatcher (<code>Dispatcher</code>) can be viewed as the central managing component that coordinates the logic for handling all incoming events.</li> </ul>"},{"location":"learn/types/","title":"Data Types","text":"<p>When developing applications, it is especially important that the IDE provides hints about available methods and class parameters. However, the router (Router) passes different data types to handlers, and the IDE cannot always correctly determine their type. Therefore, it needs a hint about which specific object is being passed.</p> <p>In python-trueconf-bot, this is handled by the <code>trueconf.types</code> package, which describes all incoming server events and requests (notifications). For responses to client requests, a separate module is provided \u2014 <code>trueconf.types.responses</code>.</p> <p>Thus:</p> <ul> <li>when working with events, use types from <code>trueconf.types</code>;</li> <li>when working with client request results, use types from <code>trueconf.types.responses</code>.</li> </ul> <p>This ensures:</p> <ul> <li>IDE autocompletion (hints for attributes and methods);</li> <li>static type checking with mypy or similar tools;</li> <li>more convenient code and documentation navigation.</li> </ul>"},{"location":"learn/types/#example-usage","title":"Example Usage","text":"<p>Suppose you want to handle an event about adding a new participant to a chat (1):</p> <ol> <li>According to the API, this request has <code>\"method\": \"addChatParticipant\"</code>.</li> </ol> <pre><code>from trueconf import Router\n\nr = Router()\n\n@r.added_chat_participant()\nasync def on_added_user(event): ...\n</code></pre> <p>To enable the IDE to provide hints about the available attributes of the <code>event</code> object, you need to specify the correct data type:</p> <pre><code>from trueconf import Router\nfrom trueconf.types import AddedChatParticipant\n\nr = Router()\n\n@r.added_chat_participant()\nasync def on_added_user(event: AddedChatParticipant):\n    who_add = event.added_by\n</code></pre> <p>In this example:</p> <ul> <li><code>AddedChatParticipant</code> describes the structure of the incoming event,</li> <li>you get convenient IDE autocompletion,</li> <li>with static type checking tools (e.g., mypy), the correctness of field access is automatically verified.</li> </ul>"},{"location":"learn/types/#raw-event","title":"\u201cRaw\u201d event","text":"<p>When using the <code>@&lt;router&gt;.event</code> decorator, you gain access to all fields of the event object, including those that are usually hidden when converting JSON into a class:</p> <p><pre><code>{\n  \"method\": \"name\",\n  \"type\": 1,\n  \"id\": 11,\n  \"payload\": {}\n}\n</code></pre> In this case, it is better to use <code>trueconf.types.Update</code>, which describes the structure of the full update received from the server.</p> <pre><code>from trueconf import Router\nfrom trueconf.types import Update\nfrom trueconf.enums import IncomingUpdateMethod\n\nr = Router()\n\n@r.event()\nasync def raw_event(event: Update):\n    if event.method == IncomingUpdateMethod.MESSAGE:\n        pass\n\n    # Alternatively, without importing enum\n    if event.method == \"SendMessage\":\n        pass\n</code></pre>"},{"location":"reference/Bot/","title":"Class <code>Bot</code>","text":"<p>Here is the reference information for the <code>Bot</code> class, including all its parameters, attributes, and methods. You can import the <code>Bot</code> class directly from the <code>trueconf</code> package:</p> <pre><code>from trueconf import Bot\n</code></pre>"},{"location":"reference/Bot/#trueconf.Bot","title":"trueconf.Bot","text":"<pre><code>Bot(server, token, web_port=443, https=True, debug=False, verify_ssl=True, dispatcher=None, receive_unread_messages=False)\n</code></pre> <p>Initializes a TrueConf chatbot instance with WebSocket connection and configuration options.</p> Source <p>trueconf.com/docs/chatbot-connector/en/connect-and-auth/#websocket-connection-authorization</p> <p>Parameters:</p> Name Type Description Default <code>server</code> <code>str</code> <p>Address of the TrueConf server.</p> required <code>token</code> <code>str</code> <p>Bot authorization token.</p> required <code>web_port</code> <code>int</code> <p>WebSocket connection port. Defaults to 443.</p> <code>443</code> <code>https</code> <code>bool</code> <p>Whether to use HTTPS protocol. Defaults to True.</p> <code>True</code> <code>debug</code> <code>bool</code> <p>Enables debug mode. Defaults to False.</p> <code>False</code> <code>verify_ssl</code> <code>bool</code> <p>Whether to verify the server's SSL certificate. Defaults to True.</p> <code>True</code> <code>dispatcher</code> <code>Dispatcher | None</code> <p>Dispatcher instance for registering handlers.</p> <code>None</code> <code>receive_unread_messages</code> <code>bool</code> <p>Whether to receive unread messages on connection. Defaults to False.</p> <code>False</code> Note <p>Alternatively, you can authorize using a username and password via the <code>from_credentials()</code> class method.</p>"},{"location":"reference/Bot/#trueconf.Bot.authorized_event","title":"authorized_event  <code>instance-attribute</code>","text":"<pre><code>authorized_event = Event()\n</code></pre>"},{"location":"reference/Bot/#trueconf.Bot.connected_event","title":"connected_event  <code>instance-attribute</code>","text":"<pre><code>connected_event = Event()\n</code></pre>"},{"location":"reference/Bot/#trueconf.Bot.debug","title":"debug  <code>instance-attribute</code>","text":"<pre><code>debug = debug\n</code></pre>"},{"location":"reference/Bot/#trueconf.Bot.dp","title":"dp  <code>instance-attribute</code>","text":"<pre><code>dp = dispatcher or Dispatcher()\n</code></pre>"},{"location":"reference/Bot/#trueconf.Bot.https","title":"https  <code>instance-attribute</code>","text":"<pre><code>https = https\n</code></pre>"},{"location":"reference/Bot/#trueconf.Bot.port","title":"port  <code>instance-attribute</code>","text":"<pre><code>port = 443 if https else web_port\n</code></pre>"},{"location":"reference/Bot/#trueconf.Bot.receive_unread_messages","title":"receive_unread_messages  <code>instance-attribute</code>","text":"<pre><code>receive_unread_messages = receive_unread_messages\n</code></pre>"},{"location":"reference/Bot/#trueconf.Bot.server","title":"server  <code>instance-attribute</code>","text":"<pre><code>server = server\n</code></pre>"},{"location":"reference/Bot/#trueconf.Bot.server_name","title":"server_name  <code>property</code>","text":"<pre><code>server_name\n</code></pre> <p>Returns the domain name of the TrueConf server.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Domain name of the connected server.</p>"},{"location":"reference/Bot/#trueconf.Bot.stopped_event","title":"stopped_event  <code>instance-attribute</code>","text":"<pre><code>stopped_event = Event()\n</code></pre>"},{"location":"reference/Bot/#trueconf.Bot.token","title":"token  <code>property</code>","text":"<pre><code>token\n</code></pre> <p>Returns the bot's authorization token.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The access token used for authentication.</p>"},{"location":"reference/Bot/#trueconf.Bot.verify_ssl","title":"verify_ssl  <code>instance-attribute</code>","text":"<pre><code>verify_ssl = verify_ssl\n</code></pre>"},{"location":"reference/Bot/#trueconf.Bot.web_port","title":"web_port  <code>instance-attribute</code>","text":"<pre><code>web_port = web_port\n</code></pre>"},{"location":"reference/Bot/#trueconf.Bot.add_participant_to_chat","title":"add_participant_to_chat  <code>async</code>","text":"<pre><code>add_participant_to_chat(chat_id, user_id)\n</code></pre> <p>Adds a participant to the specified chat.</p> Source <p>trueconf.com/docs/chatbot-connector/en/chats/#adding-a-participant-to-the-chat</p> <p>Parameters:</p> Name Type Description Default <code>chat_id</code> <code>str</code> <p>Identifier of the chat to add the participant to.</p> required <code>user_id</code> <code>str</code> <p>Identifier of the user to be added.</p> required <p>Returns:</p> Name Type Description <code>AddChatParticipantResponse</code> <code>AddChatParticipantResponse</code> <p>Object containing the result of the participant addition.</p>"},{"location":"reference/Bot/#trueconf.Bot.create_channel","title":"create_channel  <code>async</code>","text":"<pre><code>create_channel(title)\n</code></pre> <p>Creates a new channel with the specified title.</p> Source <p>trueconf.com/docs/chatbot-connector/en/chats/#creating-a-channel</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>Title of the new channel.</p> required <p>Returns:</p> Name Type Description <code>CreateChannelResponse</code> <code>CreateChannelResponse</code> <p>Object containing the result of the channel creation.</p>"},{"location":"reference/Bot/#trueconf.Bot.create_group_chat","title":"create_group_chat  <code>async</code>","text":"<pre><code>create_group_chat(title)\n</code></pre> <p>Creates a new group chat with the specified title.</p> Source <p>trueconf.com/docs/chatbot-connector/en/chats/#creating-a-group-chat</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>Title of the new group chat.</p> required <p>Returns:</p> Name Type Description <code>CreateGroupChatResponse</code> <code>CreateGroupChatResponse</code> <p>Object containing the result of the group chat creation.</p>"},{"location":"reference/Bot/#trueconf.Bot.create_personal_chat","title":"create_personal_chat  <code>async</code>","text":"<pre><code>create_personal_chat(user_id)\n</code></pre> <p>Creates a personal (P2P) chat with a user by their identifier.</p> Source <p>trueconf.com/docs/chatbot-connector/en/chats/#creating-a-personal-chat-with-a-user</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>Identifier of the user. Can be with or without a domain.</p> required <p>Returns:</p> Name Type Description <code>CreateP2PChatResponse</code> <code>CreateP2PChatResponse</code> <p>Object containing the result of the personal chat creation.</p> Note <p>Creating a personal chat (peer-to-peer) with a server user. If the bot has never messaged this user before, a new chat will be created. If the bot has previously sent messages to this user, the existing chat will be returned.</p>"},{"location":"reference/Bot/#trueconf.Bot.delete_chat","title":"delete_chat  <code>async</code>","text":"<pre><code>delete_chat(chat_id)\n</code></pre> <p>Deletes a chat by its identifier.</p> Source <p>trueconf.com/docs/chatbot-connector/en/chats/#deleting-chat</p> <p>Parameters:</p> Name Type Description Default <code>chat_id</code> <code>str</code> <p>Identifier of the chat to be deleted.</p> required <p>Returns:</p> Name Type Description <code>RemoveChatResponse</code> <code>RemoveChatResponse</code> <p>Object containing the result of the chat deletion.</p>"},{"location":"reference/Bot/#trueconf.Bot.download_file_by_id","title":"download_file_by_id  <code>async</code>","text":"<pre><code>download_file_by_id(file_id, dest_path=None)\n</code></pre> <p>Downloads a file by its ID, waiting for the upload to complete if necessary.</p> <p>If the file is already in the READY state, it will be downloaded immediately. If the file is in the NOT_AVAILABLE state, the method will exit without downloading. In other cases, the bot will wait for the upload to finish and then attempt to download the file.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>str</code> <p>Unique identifier of the file on the server.</p> required <code>dest_path</code> <code>str</code> <p>Path where the file should be saved. If not specified, a temporary file will be created using <code>NamedTemporaryFile</code> (with prefix <code>tc_dl_</code>, suffix set to the original file name, and <code>delete=False</code> to keep the file on disk).</p> <code>None</code> <p>Returns:</p> Type Description <code>Path | None</code> <p>Path | None: Path to the downloaded file, or None if the download failed.</p>"},{"location":"reference/Bot/#trueconf.Bot.edit_message","title":"edit_message  <code>async</code>","text":"<pre><code>edit_message(message_id, text, parse_mode=TEXT)\n</code></pre> <p>Edits a previously sent message.</p> Source <p>trueconf.com/docs/chatbot-connector/en/messages/#editing-an-existing-message</p> <p>Parameters:</p> Name Type Description Default <code>message_id</code> <code>str</code> <p>Identifier of the message to be edited.</p> required <code>text</code> <code>str</code> <p>New text content for the message.</p> required <code>parse_mode</code> <code>ParseMode | str</code> <p>Text formatting mode. Defaults to plain text.</p> <code>TEXT</code> <p>Returns:</p> Name Type Description <code>EditMessageResponse</code> <code>EditMessageResponse</code> <p>Object containing the result of the message update.</p>"},{"location":"reference/Bot/#trueconf.Bot.edit_survey","title":"edit_survey  <code>async</code>","text":"<pre><code>edit_survey(message_id, title, survey_campaign_id, survey_type=NON_ANONYMOUS)\n</code></pre> <p>Edits a previously sent survey.</p> Source <p>trueconf.com/docs/chatbot-connector/en/surveys/#editing-a-poll-message</p> <p>Parameters:</p> Name Type Description Default <code>message_id</code> <code>str</code> <p>Identifier of the message containing the survey to edit.</p> required <code>title</code> <code>str</code> <p>New title of the survey.</p> required <code>survey_campaign_id</code> <code>str</code> <p>Identifier of the survey campaign.</p> required <code>survey_type</code> <code>SurveyType</code> <p>Type of the survey (anonymous or non-anonymous). Defaults to non-anonymous.</p> <code>NON_ANONYMOUS</code> <p>Returns:</p> Name Type Description <code>EditSurveyResponse</code> <code>EditSurveyResponse</code> <p>Object containing the result of the survey update.</p>"},{"location":"reference/Bot/#trueconf.Bot.forward_message","title":"forward_message  <code>async</code>","text":"<pre><code>forward_message(chat_id, message_id)\n</code></pre> <p>Forwards a message to the specified chat.</p> Source <p>trueconf.com/docs/chatbot-connector/en/messages/#forwarding-a-message-to-another-chat</p> <p>Parameters:</p> Name Type Description Default <code>chat_id</code> <code>str</code> <p>Identifier of the chat to forward the message to.</p> required <code>message_id</code> <code>str</code> <p>Identifier of the message to be forwarded.</p> required <p>Returns:</p> Name Type Description <code>ForwardMessageResponse</code> <code>ForwardMessageResponse</code> <p>Object containing the result of the message forwarding.</p>"},{"location":"reference/Bot/#trueconf.Bot.from_credentials","title":"from_credentials  <code>classmethod</code>","text":"<pre><code>from_credentials(server, username, password, dispatcher=None, receive_unread_messages=False, verify_ssl=True, **token_opts)\n</code></pre> <p>Creates a bot instance using username and password authentication.</p> Source <p>trueconf.com/docs/chatbot-connector/en/getting-started/#authorization</p> <p>Parameters:</p> Name Type Description Default <code>server</code> <code>str</code> <p>Address of the TrueConf server.</p> required <code>username</code> <code>str</code> <p>Username for authentication.</p> required <code>password</code> <code>str</code> <p>Password for authentication.</p> required <code>dispatcher</code> <code>Dispatcher | None</code> <p>Dispatcher instance for registering handlers.</p> <code>None</code> <code>receive_unread_messages</code> <code>bool</code> <p>Whether to receive unread messages on connection. Defaults to False.</p> <code>False</code> <code>verify_ssl</code> <code>bool</code> <p>Whether to verify the server's SSL certificate. Defaults to True.</p> <code>True</code> <code>**token_opts</code> <code>Unpack[TokenOpts]</code> <p>Additional options passed to the token request, such as <code>web_port</code> and <code>https</code>.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Bot</code> <code>Self</code> <p>An authorized bot instance.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the token could not be obtained.</p>"},{"location":"reference/Bot/#trueconf.Bot.get_chat_by_id","title":"get_chat_by_id  <code>async</code>","text":"<pre><code>get_chat_by_id(chat_id)\n</code></pre> <p>Retrieves information about a chat by its identifier.</p> Source <p>trueconf.com/docs/chatbot-connector/en/chats/#retrieving-chat-information-by-id</p> <p>Parameters:</p> Name Type Description Default <code>chat_id</code> <code>str</code> <p>Identifier of the chat.</p> required <p>Returns:</p> Name Type Description <code>GetChatByIDResponse</code> <code>GetChatByIdResponse</code> <p>Object containing information about the chat.</p>"},{"location":"reference/Bot/#trueconf.Bot.get_chat_history","title":"get_chat_history  <code>async</code>","text":"<pre><code>get_chat_history(chat_id, count, from_message_id=None)\n</code></pre> <p>Retrieves the message history of the specified chat.</p> Source <p>trueconf.com/docs/chatbot-connector/en/messages/#retrieving-chat-history</p> <p>Parameters:</p> Name Type Description Default <code>chat_id</code> <code>str</code> <p>Identifier of the chat.</p> required <code>count</code> <code>int</code> <p>Number of messages to retrieve.</p> required <code>from_message_id</code> <code>str | None</code> <p>Identifier of the message to start retrieving history from. If not specified, the history will be loaded from the most recent message.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>GetChatHistoryResponse</code> <code>GetChatHistoryResponse</code> <p>Object containing the result of the chat history request.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the count number is less than 1.</p>"},{"location":"reference/Bot/#trueconf.Bot.get_chat_participants","title":"get_chat_participants  <code>async</code>","text":"<pre><code>get_chat_participants(chat_id, page_size, page_number)\n</code></pre> <p>Retrieves a paginated list of chat participants.</p> Source <p>trueconf.com/docs/chatbot-connector/en/chats/#retrieving-the-list-of-chat-participants</p> <p>Parameters:</p> Name Type Description Default <code>chat_id</code> <code>str</code> <p>Identifier of the chat.</p> required <code>page_size</code> <code>int</code> <p>Number of participants per page.</p> required <code>page_number</code> <code>int</code> <p>Page number.</p> required <p>Returns:</p> Name Type Description <code>GetChatParticipantsResponse</code> <code>GetChatParticipantsResponse</code> <p>Object containing the result of the participant list request.</p>"},{"location":"reference/Bot/#trueconf.Bot.get_chats","title":"get_chats  <code>async</code>","text":"<pre><code>get_chats(count=10, page=1)\n</code></pre> <p>Retrieves a paginated list of chats available to the bot.</p> Source <p>trueconf.com/docs/chatbot-connector/en/chats/#retrieving-the-list-of-chats</p> <p>Parameters:</p> Name Type Description Default <code>count</code> <code>int</code> <p>Number of chats per page. Defaults to 10.</p> <code>10</code> <code>page</code> <code>int</code> <p>Page number. Must be greater than 0. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Name Type Description <code>GetChatsResponse</code> <code>GetChatsResponse</code> <p>Object containing the result of the chat list request.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the page number is less than 1.</p>"},{"location":"reference/Bot/#trueconf.Bot.get_file_info","title":"get_file_info  <code>async</code>","text":"<pre><code>get_file_info(file_id)\n</code></pre> <p>Retrieves information about a file by its identifier.</p> Source <p>trueconf.com/docs/chatbot-connector/en/files/#retrieving-file-information-and-downloading-the-file</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>str</code> <p>Identifier of the file.</p> required <p>Returns:</p> Name Type Description <code>GetFileInfoResponse</code> <code>GetFileInfoResponse</code> <p>Object containing information about the file.</p>"},{"location":"reference/Bot/#trueconf.Bot.get_message_by_id","title":"get_message_by_id  <code>async</code>","text":"<pre><code>get_message_by_id(message_id)\n</code></pre> <p>Retrieves a message by its identifier.</p> Source <p>trueconf.com/docs/chatbot-connector/en/messages/#retrieving-a-message-by-its-id</p> <p>Parameters:</p> Name Type Description Default <code>message_id</code> <code>str</code> <p>Identifier of the message to retrieve.</p> required <p>Returns:</p> Name Type Description <code>GetMessageByIdResponse</code> <code>GetMessageByIdResponse</code> <p>Object containing the retrieved message data.</p>"},{"location":"reference/Bot/#trueconf.Bot.get_user_display_name","title":"get_user_display_name  <code>async</code>","text":"<pre><code>get_user_display_name(user_id)\n</code></pre> <p>Retrieves the display name of a user by their TrueConf ID.</p> Source <p>trueconf.com/docs/chatbot-connector/en/contacts/#retrieving-the-display-name-of-a-user-by-their-trueconf-id</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>User's TrueConf ID. Can be specified with or without a domain.</p> required <p>Returns:</p> Name Type Description <code>GetUserDisplayNameResponse</code> <code>GetUserDisplayNameResponse</code> <p>Object containing the user's display name.</p>"},{"location":"reference/Bot/#trueconf.Bot.has_chat_participant","title":"has_chat_participant  <code>async</code>","text":"<pre><code>has_chat_participant(chat_id, user_id)\n</code></pre> <p>Checks whether the specified user is a participant in the chat.</p> Source <p>trueconf.com/docs/chatbot-connector/en/chats/#checking-participant-presence-in-chat</p> <p>Parameters:</p> Name Type Description Default <code>chat_id</code> <code>str</code> <p>Identifier of the chat.</p> required <code>user_id</code> <code>str</code> <p>Identifier of the user. Can be with or without a domain.</p> required <p>Returns:</p> Name Type Description <code>HasChatParticipantResponse</code> <code>HasChatParticipantResponse</code> <p>Object containing the result of the check.</p>"},{"location":"reference/Bot/#trueconf.Bot.remove_message","title":"remove_message  <code>async</code>","text":"<pre><code>remove_message(message_id, for_all=False)\n</code></pre> <p>Removes a message by its identifier.</p> Source <p>trueconf.com/docs/chatbot-connector/en/messages/#deleting-a-message</p> <p>Parameters:</p> Name Type Description Default <code>message_id</code> <code>str</code> <p>Identifier of the message to be removed.</p> required <code>for_all</code> <code>bool</code> <p>If True, the message will be removed for all participants. Default to False (the message is removed only for the bot).</p> <code>False</code> <p>Returns:</p> Name Type Description <code>RemoveMessageResponse</code> <code>RemoveMessageResponse</code> <p>Object containing the result of the message deletion.</p>"},{"location":"reference/Bot/#trueconf.Bot.remove_participant_from_chat","title":"remove_participant_from_chat  <code>async</code>","text":"<pre><code>remove_participant_from_chat(chat_id, user_id)\n</code></pre> <p>Removes a participant from the specified chat.</p> Source <p>trueconf.com/docs/chatbot-connector/en/chats/#removing-a-participant-from-the-chat</p> <p>Parameters:</p> Name Type Description Default <code>chat_id</code> <code>str</code> <p>Identifier of the chat to remove the participant from.</p> required <code>user_id</code> <code>str</code> <p>Identifier of the user to be removed.</p> required <p>Returns:</p> Name Type Description <code>RemoveChatParticipantResponse</code> <code>RemoveChatParticipantResponse</code> <p>Object containing the result of the participant removal.</p>"},{"location":"reference/Bot/#trueconf.Bot.reply_message","title":"reply_message  <code>async</code>","text":"<pre><code>reply_message(chat_id, message_id, text, parse_mode=TEXT)\n</code></pre> <p>Sends a reply to an existing message in the chat.</p> Source <p>trueconf.com/docs/chatbot-connector/en/messages/#reply-to-an-existing-message</p> <p>Parameters:</p> Name Type Description Default <code>chat_id</code> <code>str</code> <p>Identifier of the chat where the reply will be sent.</p> required <code>message_id</code> <code>str</code> <p>Identifier of the message to reply to.</p> required <code>text</code> <code>str</code> <p>Text content of the reply.</p> required <code>parse_mode</code> <code>ParseMode | str</code> <p>Text formatting mode. Defaults to plain text.</p> <code>TEXT</code> <p>Returns:</p> Name Type Description <code>SendMessageResponse</code> <code>SendMessageResponse</code> <p>Object containing the result of the message delivery.</p>"},{"location":"reference/Bot/#trueconf.Bot.run","title":"run  <code>async</code>","text":"<pre><code>run(handle_signals=True)\n</code></pre> <p>Runs the bot and waits until it stops. Supports handling termination signals (SIGINT, SIGTERM).</p> <p>Parameters:</p> Name Type Description Default <code>handle_signals</code> <code>bool</code> <p>Whether to handle termination signals. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"reference/Bot/#trueconf.Bot.send_document","title":"send_document  <code>async</code>","text":"<pre><code>send_document(chat_id, file_path)\n</code></pre> <p>Sends a document to the specified chat.</p> <p>Files of any format are supported. A preview is automatically generated for the following file types: .jpg, .jpeg, .png, .webp, .bmp, .gif, .tiff, .pdf</p> Source <p>trueconf.com/docs/chatbot-connector/en/files/#file-transfer</p> <p>Parameters:</p> Name Type Description Default <code>chat_id</code> <code>str</code> <p>Identifier of the chat to send the document to.</p> required <code>file_path</code> <code>str</code> <p>Path to the document file.</p> required <p>Returns:</p> Name Type Description <code>SendFileResponse</code> <code>SendFileResponse</code> <p>Object containing the result of the file upload.</p>"},{"location":"reference/Bot/#trueconf.Bot.send_message","title":"send_message  <code>async</code>","text":"<pre><code>send_message(chat_id, text, parse_mode=TEXT)\n</code></pre> <p>Sends a message to the specified chat.</p> Source <p>trueconf.com/docs/chatbot-connector/en/messages/#sending-a-text-message-in-chat</p> <p>Parameters:</p> Name Type Description Default <code>chat_id</code> <code>str</code> <p>Identifier of the chat to send the message to.</p> required <code>text</code> <code>str</code> <p>Text content of the message.</p> required <code>parse_mode</code> <code>ParseMode | str</code> <p>Text formatting mode. Defaults to plain text.</p> <code>TEXT</code> <p>Returns:</p> Name Type Description <code>SendMessageResponse</code> <code>SendMessageResponse</code> <p>Object containing the result of the message delivery.</p>"},{"location":"reference/Bot/#trueconf.Bot.send_photo","title":"send_photo  <code>async</code>","text":"<pre><code>send_photo(chat_id, file_path, preview_path)\n</code></pre> <p>Sends a photo to the specified chat with preview (optional).</p> <p>Supported image formats: .jpg, .jpeg, .png, .webp, .bmp, .gif, .tiff</p> Source <p>trueconf.com/docs/chatbot-connector/en/files/#file-transfer</p> <p>Parameters:</p> Name Type Description Default <code>chat_id</code> <code>str</code> <p>Identifier of the chat to send the photo to.</p> required <code>file_path</code> <code>str</code> <p>Path to the image file.</p> required <code>preview_path</code> <code>str | None</code> <p>Path to the preview image.</p> required <p>Returns:</p> Name Type Description <code>SendFileResponse</code> <code>SendFileResponse</code> <p>Object containing the result of the file upload.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; bot.send_photo(chat_id=\"a1s2d3f4f5g6\", file_path=\"/path/to/image.jpg\", preview_path=\"/path/to/preview.webp\")\n</code></pre>"},{"location":"reference/Bot/#trueconf.Bot.send_sticker","title":"send_sticker  <code>async</code>","text":"<pre><code>send_sticker(chat_id, file_path)\n</code></pre> <p>Sends a WebP-format sticker to the specified chat.</p> Source <p>trueconf.com/docs/chatbot-connector/en/files/#file-transfer</p> <p>Parameters:</p> Name Type Description Default <code>chat_id</code> <code>str</code> <p>Identifier of the chat to send the sticker to.</p> required <code>file_path</code> <code>str</code> <p>Path to the sticker file in WebP format.</p> required <p>Returns:</p> Name Type Description <code>SendFileResponse</code> <code>SendFileResponse</code> <p>Object containing the result of the file upload.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If the file does not have the MIME type 'image/webp'.</p>"},{"location":"reference/Bot/#trueconf.Bot.send_survey","title":"send_survey  <code>async</code>","text":"<pre><code>send_survey(chat_id, title, survey_campaign_id, reply_message_id=None, survey_type=NON_ANONYMOUS)\n</code></pre> <p>Sends a survey to the specified chat.</p> Source <p>trueconf.com/docs/chatbot-connector/en/surveys/#sending-a-poll-message-in-chat</p> <p>Parameters:</p> Name Type Description Default <code>chat_id</code> <code>str</code> <p>Identifier of the chat to send the survey to.</p> required <code>title</code> <code>str</code> <p>Title of the survey displayed in the chat.</p> required <code>survey_campaign_id</code> <code>str</code> <p>Identifier of the survey campaign.</p> required <code>reply_message_id</code> <code>str</code> <p>Identifier of the message being replied to.</p> <code>None</code> <code>survey_type</code> <code>SurveyType</code> <p>Type of the survey (anonymous or non-anonymous). Defaults to non-anonymous.</p> <code>NON_ANONYMOUS</code> <p>Returns:</p> Name Type Description <code>SendSurveyResponse</code> <code>SendSurveyResponse</code> <p>Object containing the result of the survey submission.</p>"},{"location":"reference/Bot/#trueconf.Bot.shutdown","title":"shutdown  <code>async</code>","text":"<pre><code>shutdown()\n</code></pre> <p>Gracefully shuts down the bot, cancels the connection task, and closes active sessions.</p> <p>This method: - Cancels the connection task if it is still active; - Closes the WebSocket session or <code>self.session</code> if they are open; - Clears the connection and authorization events; - Sets the <code>stopped_event</code> flag.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"reference/Bot/#trueconf.Bot.start","title":"start  <code>async</code>","text":"<pre><code>start()\n</code></pre> <p>Starts the bot by connecting to the server and listening for incoming events.</p> Note <p>This method is safe to call multiple times \u2014 subsequent calls are ignored if the connection is already active.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"reference/Bot/#trueconf.Bot.subscribe_file_progress","title":"subscribe_file_progress  <code>async</code>","text":"<pre><code>subscribe_file_progress(file_id)\n</code></pre> <p>Subscribes to file transfer progress updates.</p> Source <p>trueconf.com/docs/chatbot-connector/en/files/#subscription-to-file-upload-progress-on-the-server</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>str</code> <p>Identifier of the file.</p> required <p>Returns:</p> Name Type Description <code>SubscribeFileProgressResponse</code> <code>SubscribeFileProgressResponse</code> <p>Object containing the result of the subscription.</p> Note <p>If the file is in the UPLOADING status, you can subscribe to the upload process to be notified when the file becomes available.</p>"},{"location":"reference/Bot/#trueconf.Bot.unsubscribe_file_progress","title":"unsubscribe_file_progress  <code>async</code>","text":"<pre><code>unsubscribe_file_progress(file_id)\n</code></pre> <p>Unsubscribes from receiving file upload progress events.</p> Source <p>trueconf.com/docs/chatbot-connector/en/files/#unsubscribe-from-receiving-upload-event-notifications</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>str</code> <p>Identifier of the file.</p> required <p>Returns:</p> Name Type Description <code>UnsubscribeFileProgressResponse</code> <code>UnsubscribeFileProgressResponse</code> <p>Object containing the result of the unsubscription.</p> Note <p>If necessary, you can unsubscribe from file upload events that were previously subscribed to using the <code>subscribe_file_progress()</code> method.</p>"},{"location":"reference/Dispatcher/","title":"Class <code>Dispatcher</code>","text":"<p>Here is the reference information for the <code>Dispatcher</code> class, including all its parameters, attributes, and methods. You can import the <code>Dispatcher</code> class directly from the <code>trueconf</code> package:</p> <pre><code>from trueconf import Dispatcher\n</code></pre>"},{"location":"reference/Dispatcher/#trueconf.Dispatcher","title":"trueconf.Dispatcher","text":"<pre><code>Dispatcher()\n</code></pre> <p>Central event dispatcher for processing and routing incoming events.</p> <p>The <code>Dispatcher</code> aggregates one or more <code>Router</code> instances and feeds each incoming event through them. The routers are traversed recursively via their <code>subrouters</code> (using <code>_iter_all()</code>), and each event is passed to <code>_feed()</code> of each router in order until it is handled.</p> <p>Typical usage includes registering routers with handlers and then calling <code>feed_update()</code> with incoming events.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dispatcher = Dispatcher()\n&gt;&gt;&gt; dispatcher.include_router(my_router)\n</code></pre> <p>Attributes:</p> Name Type Description <code>routers</code> <code>List[Router]</code> <p>List of root routers included in the dispatcher.</p> <p>Initializes an empty dispatcher with no routers.</p>"},{"location":"reference/Dispatcher/#trueconf.Dispatcher.routers","title":"routers  <code>instance-attribute</code>","text":"<pre><code>routers = []\n</code></pre>"},{"location":"reference/Dispatcher/#trueconf.Dispatcher.include_router","title":"include_router","text":"<pre><code>include_router(router)\n</code></pre> <p>Includes a router to be used by the dispatcher.</p> <p>Parameters:</p> Name Type Description Default <code>router</code> <code>Router</code> <p>A <code>Router</code> instance to include.</p> required"},{"location":"reference/Enums/","title":"Enums","text":"<p>You can import all enums at once:</p> <pre><code>from trueconf.enums import *\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums","title":"trueconf.enums","text":""},{"location":"reference/Enums/#trueconf.enums.ChatParticipantRole","title":"ChatParticipantRole","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>This object represents a possible participant role in a chat.</p> Source <p>trueconf.com/docs/chatbot-connector/en/objects/#chatparticipantroleenum</p>"},{"location":"reference/Enums/#trueconf.enums.ChatParticipantRole.ADMIN","title":"ADMIN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ADMIN = 'admin'\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.ChatParticipantRole.CONF_MODERATOR","title":"CONF_MODERATOR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CONF_MODERATOR = 'conf_moderator'\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.ChatParticipantRole.CONF_OWNER","title":"CONF_OWNER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CONF_OWNER = 'conf_owner'\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.ChatParticipantRole.FAVORITES_OWNER","title":"FAVORITES_OWNER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FAVORITES_OWNER = 'favorites_owner'\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.ChatParticipantRole.OWNER","title":"OWNER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>OWNER = 'owner'\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.ChatParticipantRole.USER","title":"USER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>USER = 'user'\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.ChatParticipantRole.WRITER","title":"WRITER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>WRITER = 'writer'\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.ChatType","title":"ChatType","text":"<p>               Bases: <code>int</code>, <code>Enum</code></p> <p>The enumeration contains possible chat types.</p> Source <p>trueconf.com/docs/chatbot-connector/en/objects/#chattypeenum</p>"},{"location":"reference/Enums/#trueconf.enums.ChatType.CHANNEL","title":"CHANNEL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CHANNEL = 6\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.ChatType.FAVORITES","title":"FAVORITES  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FAVORITES = 5\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.ChatType.GROUP","title":"GROUP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GROUP = 2\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.ChatType.P2P","title":"P2P  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>P2P = 1\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.ChatType.SYSTEM","title":"SYSTEM  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SYSTEM = 3\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.ChatType.UNDEF","title":"UNDEF  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>UNDEF = 0\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.EnvelopeAuthorType","title":"EnvelopeAuthorType","text":"<p>               Bases: <code>int</code>, <code>Enum</code></p> <p>The enumeration contains possible author types.</p> Source <p>trueconf.com/docs/chatbot-connector/en/objects/#envelopeauthortypeenum</p>"},{"location":"reference/Enums/#trueconf.enums.EnvelopeAuthorType.SYSTEM","title":"SYSTEM  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SYSTEM = 0\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.EnvelopeAuthorType.USER","title":"USER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>USER = 1\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.FileReadyState","title":"FileReadyState","text":"<p>               Bases: <code>int</code>, <code>Enum</code></p> <p>This enumeration is used to indicate the status of a file on the server.</p> Source <p>trueconf.com/docs/chatbot-connector/en/objects/#filereadystateenum</p>"},{"location":"reference/Enums/#trueconf.enums.FileReadyState.NOT_AVAILABLE","title":"NOT_AVAILABLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>NOT_AVAILABLE = 0\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.FileReadyState.READY","title":"READY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>READY = 2\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.FileReadyState.UPLOADING","title":"UPLOADING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>UPLOADING = 1\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.IncomingUpdateMethod","title":"IncomingUpdateMethod","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"reference/Enums/#trueconf.enums.IncomingUpdateMethod.ADDED_CHAT_PARTICIPANT","title":"ADDED_CHAT_PARTICIPANT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ADDED_CHAT_PARTICIPANT = 'addChatParticipant'\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.IncomingUpdateMethod.CREATED_CHANNEL","title":"CREATED_CHANNEL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CREATED_CHANNEL = 'createChannel'\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.IncomingUpdateMethod.CREATED_GROUP_CHAT","title":"CREATED_GROUP_CHAT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CREATED_GROUP_CHAT = 'createGroupChat'\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.IncomingUpdateMethod.CREATED_PERSONAL_CHAT","title":"CREATED_PERSONAL_CHAT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CREATED_PERSONAL_CHAT = 'createP2PChat'\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.IncomingUpdateMethod.EDITED_MESSAGE","title":"EDITED_MESSAGE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>EDITED_MESSAGE = 'editMessage'\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.IncomingUpdateMethod.MESSAGE","title":"MESSAGE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MESSAGE = 'sendMessage'\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.IncomingUpdateMethod.REMOVED_CHAT","title":"REMOVED_CHAT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>REMOVED_CHAT = 'removeChat'\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.IncomingUpdateMethod.REMOVED_CHAT_PARTICIPANT","title":"REMOVED_CHAT_PARTICIPANT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>REMOVED_CHAT_PARTICIPANT = 'removeChatParticipant'\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.IncomingUpdateMethod.REMOVED_MESSAGE","title":"REMOVED_MESSAGE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>REMOVED_MESSAGE = 'removeMessage'\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.IncomingUpdateMethod.UPLOADING_PROGRESS","title":"UPLOADING_PROGRESS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>UPLOADING_PROGRESS = 'uploadFileProgress'\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.MessageType","title":"MessageType","text":"<p>               Bases: <code>int</code>, <code>Enum</code></p> <p>The enumeration contains the message type.</p> Source <p>trueconf.com/docs/chatbot-connector/en/objects/#envelopetypeenum</p>"},{"location":"reference/Enums/#trueconf.enums.MessageType.ADD_PARTICIPANT","title":"ADD_PARTICIPANT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ADD_PARTICIPANT = 1\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.MessageType.ATTACHMENT","title":"ATTACHMENT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ATTACHMENT = 202\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.MessageType.FORWARDED_MESSAGE","title":"FORWARDED_MESSAGE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FORWARDED_MESSAGE = 201\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.MessageType.PARTICIPANT_ROLE","title":"PARTICIPANT_ROLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PARTICIPANT_ROLE = 110\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.MessageType.PLAIN_MESSAGE","title":"PLAIN_MESSAGE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PLAIN_MESSAGE = 200\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.MessageType.REMOVE_PARTICIPANT","title":"REMOVE_PARTICIPANT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>REMOVE_PARTICIPANT = 2\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.MessageType.SURVEY","title":"SURVEY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SURVEY = 204\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.OAuthError","title":"OAuthError","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Error codes, according to the OAuth 2.0 specification, are presented as ASCII strings from the list specified in the specification.</p> Source <p>trueconf.com/docs/chatbot-connector/en/objects/#oauth-error</p>"},{"location":"reference/Enums/#trueconf.enums.OAuthError.INVALID_CLIENT","title":"INVALID_CLIENT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INVALID_CLIENT = 'invalid_client'\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.OAuthError.INVALID_GRANT","title":"INVALID_GRANT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INVALID_GRANT = 'invalid_grant'\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.OAuthError.INVALID_REQUEST","title":"INVALID_REQUEST  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INVALID_REQUEST = 'invalid_request'\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.OAuthError.UNSUPORTED_GRANT_TYPE","title":"UNSUPORTED_GRANT_TYPE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>UNSUPORTED_GRANT_TYPE = 'unsupported_grant_type'\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.ParseMode","title":"ParseMode","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Formatting options</p> Source <p>trueconf.com/docs/chatbot-connector/en/messages/#message-formatting</p>"},{"location":"reference/Enums/#trueconf.enums.ParseMode.HTML","title":"HTML  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>HTML = 'html'\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.ParseMode.MARKDOWN","title":"MARKDOWN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MARKDOWN = 'markdown'\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.ParseMode.TEXT","title":"TEXT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TEXT = 'text'\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.SurveyType","title":"SurveyType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"reference/Enums/#trueconf.enums.SurveyType.ANONYMOUS","title":"ANONYMOUS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ANONYMOUS = '{{Anonymous survey}}'\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.SurveyType.NON_ANONYMOUS","title":"NON_ANONYMOUS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>NON_ANONYMOUS = '{{Survey}}'\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.UpdateType","title":"UpdateType","text":"<p>               Bases: <code>int</code>, <code>Enum</code></p> <p>There are three types of messages. Only REQUEST and RESPONSE are applicable.</p> Source <p>trueconf.com/docs/chatbot-connector/en/objects/#message-type</p>"},{"location":"reference/Enums/#trueconf.enums.UpdateType.REQUEST","title":"REQUEST  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>REQUEST = 1\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.UpdateType.RESERVED","title":"RESERVED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RESERVED = 0\n</code></pre>"},{"location":"reference/Enums/#trueconf.enums.UpdateType.RESPONSE","title":"RESPONSE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RESPONSE = 2\n</code></pre>"},{"location":"reference/Router/","title":"Class <code>Router</code>","text":"<p>Here is the reference information for the <code>Router</code> class, including all its parameters, attributes, and methods. You can import the <code>Router</code> class directly from the <code>trueconf</code> package:</p> <pre><code>from trueconf import Router\n</code></pre>"},{"location":"reference/Router/#trueconf.Router","title":"trueconf.Router","text":"<pre><code>Router(name=None, stop_on_first=True)\n</code></pre> <p>Event router for handling incoming events in a structured and extensible way.</p> <p>A <code>Router</code> allows you to register event handlers with specific filters, such as message types, chat events, or custom logic.</p> <p>You can also include nested routers using <code>include_router()</code> to build modular and reusable event structures.</p> <p>Handlers can be registered for:</p> <ul> <li>Messages (<code>@&lt;router&gt;.message(...)</code>)</li> <li>Chat creation events (<code>@&lt;router&gt;.created_personal_chat()</code>, <code>@&lt;router&gt;.created_group_chat()</code>, <code>@&lt;router&gt;.created_channel()</code>)</li> <li>Participant events (<code>@&lt;router&gt;.added_chat_participant()</code>, <code>@&lt;router&gt;.removed_chat_participant()</code>)</li> <li>Message lifecycle events (<code>@&lt;router&gt;.edited_message()</code>, <code>@&lt;router&gt;.removed_message()</code>)</li> <li>File upload events (<code>@&lt;router&gt;.uploading_progress()</code>)</li> <li>Removed chats (<code>@&lt;router&gt;.removed_chat()</code>)</li> </ul> <p>Example:</p> <pre><code>router = Router()\n\n@router.message(F.text == \"hello\")\nasync def handle_hello(msg: Message):\n    await msg.answer(\"Hi there!\")\n</code></pre> <p>If you have multiple routers, use <code>.include_router()</code> to add them to a parent router.</p>"},{"location":"reference/Router/#trueconf.Router.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = name or hex(id(self))\n</code></pre>"},{"location":"reference/Router/#trueconf.Router.stop_on_first","title":"stop_on_first  <code>instance-attribute</code>","text":"<pre><code>stop_on_first = stop_on_first\n</code></pre>"},{"location":"reference/Router/#trueconf.Router.added_chat_participant","title":"added_chat_participant","text":"<pre><code>added_chat_participant(*filters)\n</code></pre> <p>Register a handler when a participant is added to a chat.</p>"},{"location":"reference/Router/#trueconf.Router.created_channel","title":"created_channel","text":"<pre><code>created_channel(*filters)\n</code></pre> <p>Register a handler for channel creation events.</p>"},{"location":"reference/Router/#trueconf.Router.created_group_chat","title":"created_group_chat","text":"<pre><code>created_group_chat(*filters)\n</code></pre> <p>Register a handler for group chat creation events.</p>"},{"location":"reference/Router/#trueconf.Router.created_personal_chat","title":"created_personal_chat","text":"<pre><code>created_personal_chat(*filters)\n</code></pre> <p>Register a handler for personal chat creation events.</p>"},{"location":"reference/Router/#trueconf.Router.edited_message","title":"edited_message","text":"<pre><code>edited_message(*filters)\n</code></pre> <p>Register a handler for message edit events.</p>"},{"location":"reference/Router/#trueconf.Router.event","title":"event","text":"<pre><code>event(method, *filters)\n</code></pre> <p>Register a handler for a generic event type, filtered by method name.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; @r.event(F.method == \"SendMessage\")\n&gt;&gt;&gt; async def handle_message(msg: Message): ...\n</code></pre>"},{"location":"reference/Router/#trueconf.Router.include_router","title":"include_router","text":"<pre><code>include_router(router)\n</code></pre> <p>Include a child router for hierarchical event routing.</p>"},{"location":"reference/Router/#trueconf.Router.message","title":"message","text":"<pre><code>message(*filters)\n</code></pre> <p>Register a handler for incoming <code>Message</code> events.</p>"},{"location":"reference/Router/#trueconf.Router.removed_chat","title":"removed_chat","text":"<pre><code>removed_chat(*filters)\n</code></pre> <p>Register a handler when a chat is removed.</p>"},{"location":"reference/Router/#trueconf.Router.removed_chat_participant","title":"removed_chat_participant","text":"<pre><code>removed_chat_participant(*filters)\n</code></pre> <p>Register a handler when a participant is removed from a chat.</p>"},{"location":"reference/Router/#trueconf.Router.removed_message","title":"removed_message","text":"<pre><code>removed_message(*filters)\n</code></pre> <p>Register a handler for message deletion events.</p>"},{"location":"reference/Router/#trueconf.Router.uploading_progress","title":"uploading_progress","text":"<pre><code>uploading_progress(*filters)\n</code></pre> <p>Register a handler for file uploading progress events.</p>"},{"location":"reference/Types/","title":"Types","text":"<p>You can import all types at once:</p> <pre><code>from trueconf.types import *\n</code></pre>"},{"location":"reference/Types/#trueconf.types.AddedChatParticipant","title":"trueconf.types.AddedChatParticipant  <code>dataclass</code>","text":"<pre><code>AddedChatParticipant(timestamp, chat_id, user_id, added_by)\n</code></pre> <p>               Bases: <code>BoundToBot</code>, <code>DataClassDictMixin</code></p> <p>Event type: a new participant was added to a chat.</p> <p>This object is received in the handler when a user is added to a personal chat, group chat, channel, or conference chat.</p> Notes <p>This class is used as the event type in handler functions decorated with <code>@&lt;router&gt;.added_chat_participant()</code>.</p> Source <p>trueconf.com/docs/chatbot-connector/en/server-requests/#addChatParticipant</p> <p>Attributes:</p> Name Type Description <code>timestamp</code> <code>int</code> <p>Unix timestamp (milliseconds) of when the event occurred.</p> <code>chat_id</code> <code>str</code> <p>Unique identifier of the chat where the participant was added.</p> <code>user_id</code> <code>str</code> <p>TrueConf ID of the participant who was added.</p> <code>added_by</code> <code>EnvelopeAuthor</code> <p>Information about the user who added the participant.</p> <p>Examples:</p> <pre><code>from trueconf.types import AddedChatParticipant\n\n@&lt;router&gt;.added_chat_participant()\nasync def on_added(event: AddedChatParticipant):\n    print(event.user_id)\n</code></pre>"},{"location":"reference/Types/#trueconf.types.AddedChatParticipant.added_by","title":"added_by  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>added_by = field(metadata={'alias': 'addedBy'})\n</code></pre>"},{"location":"reference/Types/#trueconf.types.AddedChatParticipant.chat_id","title":"chat_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>chat_id = field(metadata={'alias': 'chatId'})\n</code></pre>"},{"location":"reference/Types/#trueconf.types.AddedChatParticipant.timestamp","title":"timestamp  <code>instance-attribute</code>","text":"<pre><code>timestamp\n</code></pre>"},{"location":"reference/Types/#trueconf.types.AddedChatParticipant.user_id","title":"user_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>user_id = field(metadata={'alias': 'userId'})\n</code></pre>"},{"location":"reference/Types/#trueconf.types.CreatedChannel","title":"trueconf.types.CreatedChannel  <code>dataclass</code>","text":"<pre><code>CreatedChannel(chat_id, title, chat_type, last_message, unread_messages)\n</code></pre> <p>               Bases: <code>BoundToBot</code>, <code>DataClassDictMixin</code></p> <p>Event type: a new channel chat was created.</p> <p>This object is received in the handler when a channel is created in TrueConf.</p> Notes <p>This class is used as the event type in handler functions decorated with <code>@&lt;router&gt;.created_channel()</code>.</p> Source <p>trueconf.com/docs/chatbot-connector/en/server-requests/#createChannel</p> <p>Attributes:</p> Name Type Description <code>chat_id</code> <code>str</code> <p>Unique identifier of the created channel.</p> <code>title</code> <code>str</code> <p>Title of the channel.</p> <code>chat_type</code> <code>ChatType</code> <p>Type of the chat (should be <code>channel</code>).</p> <code>last_message</code> <code>LastMessage | None</code> <p>The last message in the channel, if available.</p> <code>unread_messages</code> <code>int</code> <p>Number of unread messages in the channel.</p> <p>Examples:</p> <pre><code>from trueconf.types import CreatedChannel\n\n@&lt;router&gt;.created_channel()\nasync def on_created(event: CreatedChannel):\n    print(f\"Channel {event.title} created with id {event.chat_id}\")\n</code></pre>"},{"location":"reference/Types/#trueconf.types.CreatedChannel.chat_id","title":"chat_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>chat_id = field(metadata={'alias': 'chatId'})\n</code></pre>"},{"location":"reference/Types/#trueconf.types.CreatedChannel.chat_type","title":"chat_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>chat_type = field(metadata={'alias': 'chatType'})\n</code></pre>"},{"location":"reference/Types/#trueconf.types.CreatedChannel.last_message","title":"last_message  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>last_message = field(metadata={'alias': 'lastMessage'})\n</code></pre>"},{"location":"reference/Types/#trueconf.types.CreatedChannel.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title\n</code></pre>"},{"location":"reference/Types/#trueconf.types.CreatedChannel.unread_messages","title":"unread_messages  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>unread_messages = field(metadata={'alias': 'unreadMessages'})\n</code></pre>"},{"location":"reference/Types/#trueconf.types.CreatedGroupChat","title":"trueconf.types.CreatedGroupChat  <code>dataclass</code>","text":"<pre><code>CreatedGroupChat(chat_id, title, chat_type, last_message, unread_messages)\n</code></pre> <p>               Bases: <code>BoundToBot</code>, <code>DataClassDictMixin</code></p> <p>Event type: a new group chat was created.</p> <p>This object is received in the handler when a group chat is created in TrueConf.</p> Notes <p>This class is used as the event type in handler functions decorated with <code>@&lt;router&gt;.created_group_chat()</code>.</p> Source <p>trueconf.com/docs/chatbot-connector/en/server-requests/#createGroupChat</p> <p>Attributes:</p> Name Type Description <code>chat_id</code> <code>str</code> <p>Unique identifier of the group chat.</p> <code>title</code> <code>str</code> <p>Title of the group chat.</p> <code>chat_type</code> <code>ChatType</code> <p>Type of the chat (should be <code>group</code>).</p> <code>last_message</code> <code>LastMessage | None</code> <p>The last message in the chat, if available.</p> <code>unread_messages</code> <code>int</code> <p>Number of unread messages in the group chat.</p> <p>Examples:</p> <pre><code>from trueconf.types import CreatedGroupChat\n\n@&lt;router&gt;.created_group_chat()\nasync def on_created(event: CreatedGroupChat):\n    print(f\"Group chat {event.title} created with id {event.chat_id}\")\n</code></pre>"},{"location":"reference/Types/#trueconf.types.CreatedGroupChat.chat_id","title":"chat_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>chat_id = field(metadata={'alias': 'chatId'})\n</code></pre>"},{"location":"reference/Types/#trueconf.types.CreatedGroupChat.chat_type","title":"chat_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>chat_type = field(metadata={'alias': 'chatType'})\n</code></pre>"},{"location":"reference/Types/#trueconf.types.CreatedGroupChat.last_message","title":"last_message  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>last_message = field(metadata={'alias': 'lastMessage'})\n</code></pre>"},{"location":"reference/Types/#trueconf.types.CreatedGroupChat.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title\n</code></pre>"},{"location":"reference/Types/#trueconf.types.CreatedGroupChat.unread_messages","title":"unread_messages  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>unread_messages = field(metadata={'alias': 'unreadMessages'})\n</code></pre>"},{"location":"reference/Types/#trueconf.types.CreatedPersonalChat","title":"trueconf.types.CreatedPersonalChat  <code>dataclass</code>","text":"<pre><code>CreatedPersonalChat(chat_id, title, chat_type, last_message, unread_messages)\n</code></pre> <p>               Bases: <code>BoundToBot</code>, <code>DataClassDictMixin</code></p> <p>Event type: a new personal chat was created.</p> <p>This object is received in the handler when a personal chat is created in TrueConf.</p> Notes <p>This class is used as the event type in handler functions decorated with <code>@&lt;router&gt;.created_personal_chat()</code>.</p> Source <p>trueconf.com/docs/chatbot-connector/en/server-requests/#createP2PChat</p> <p>Attributes:</p> Name Type Description <code>chat_id</code> <code>str</code> <p>Unique identifier of the personal chat.</p> <code>title</code> <code>str</code> <p>Title of the chat (usually the participant\u2019s name).</p> <code>chat_type</code> <code>ChatType</code> <p>Type of the chat (should be <code>p2p</code>).</p> <code>last_message</code> <code>LastMessage | None</code> <p>The last message in the chat, if available.</p> <code>unread_messages</code> <code>int</code> <p>Number of unread messages in the personal chat.</p> <p>Examples:</p> <pre><code>from trueconf.types import CreatedPersonalChat\n\n@&lt;router&gt;.created_personal_chat()\nasync def on_created(event: CreatedPersonalChat):\n    print(f\"Personal chat created with id {event.chat_id}\")\n</code></pre>"},{"location":"reference/Types/#trueconf.types.CreatedPersonalChat.chat_id","title":"chat_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>chat_id = field(metadata={'alias': 'chatId'})\n</code></pre>"},{"location":"reference/Types/#trueconf.types.CreatedPersonalChat.chat_type","title":"chat_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>chat_type = field(metadata={'alias': 'chatType'})\n</code></pre>"},{"location":"reference/Types/#trueconf.types.CreatedPersonalChat.last_message","title":"last_message  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>last_message = field(metadata={'alias': 'lastMessage'})\n</code></pre>"},{"location":"reference/Types/#trueconf.types.CreatedPersonalChat.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title\n</code></pre>"},{"location":"reference/Types/#trueconf.types.CreatedPersonalChat.unread_messages","title":"unread_messages  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>unread_messages = field(metadata={'alias': 'unreadMessages'})\n</code></pre>"},{"location":"reference/Types/#trueconf.types.EditedMessage","title":"trueconf.types.EditedMessage  <code>dataclass</code>","text":"<pre><code>EditedMessage(timestamp, content, chat_id)\n</code></pre> <p>               Bases: <code>BoundToBot</code>, <code>DataClassDictMixin</code></p> <p>Event type: a message was edited.</p> <p>This object is received in the handler when a previously sent message is edited in a chat.</p> Notes <p>This class is used as the event type in handler functions decorated with <code>@&lt;router&gt;.edited_message()</code>.</p> Source <p>trueconf.com/docs/chatbot-connector/en/server-requests/#editMessage</p> <p>Attributes:</p> Name Type Description <code>timestamp</code> <code>int</code> <p>Unix timestamp (milliseconds) of when the edit occurred.</p> <code>content</code> <code>TextContent</code> <p>The updated content of the edited message.</p> <code>chat_id</code> <code>str</code> <p>Unique identifier of the chat where the message was edited.</p> <p>Examples:</p> <pre><code>from trueconf.types import EditedMessage\n\n@&lt;router&gt;.edited_message()\nasync def on_edited(event: EditedMessage):\n    print(f\"Message in chat {event.chat_id} was edited: {event.content.text}\")\n</code></pre>"},{"location":"reference/Types/#trueconf.types.EditedMessage.chat_id","title":"chat_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>chat_id = field(metadata={'alias': 'chatId'})\n</code></pre>"},{"location":"reference/Types/#trueconf.types.EditedMessage.content","title":"content  <code>instance-attribute</code>","text":"<pre><code>content\n</code></pre>"},{"location":"reference/Types/#trueconf.types.EditedMessage.timestamp","title":"timestamp  <code>instance-attribute</code>","text":"<pre><code>timestamp\n</code></pre>"},{"location":"reference/Types/#trueconf.types.Message","title":"trueconf.types.Message  <code>dataclass</code>","text":"<pre><code>Message(timestamp, type, author, box, content, message_id, chat_id, is_edited, reply_message_id=None)\n</code></pre> <p>               Bases: <code>BoundToBot</code>, <code>DataClassDictMixin</code></p> <p>Represents a single chat message within TrueConf Chatbot Connector.</p> <p>The <code>Message</code> object is automatically created for each incoming update and contains metadata (author, chat, timestamp, type) along with the actual message content. It also provides helper properties and shortcut methods to interact with the message (e.g., replying, forwarding, deleting, sending media files).</p> Source <p>trueconf.com/docs/chatbot-connector/en/server-requests/#sendMessage</p> <p>Attributes:</p> Name Type Description <code>timestamp</code> <code>int</code> <p>Unix timestamp of the message.</p> <code>type</code> <code>MessageType</code> <p>Type of the message (e.g., TEXT, ATTACHMENT).</p> <code>author</code> <code>EnvelopeAuthor</code> <p>Information about the user who sent the message.</p> <code>box</code> <code>EnvelopeBox</code> <p>Information about the chat (box) where the message was sent.</p> <code>message_id</code> <code>str</code> <p>Unique identifier of the message.</p> <code>chat_id</code> <code>str</code> <p>Unique identifier of the chat where the message was sent.</p> <code>is_edited</code> <code>bool</code> <p>Indicates whether the message was edited.</p> <code>reply_message_id</code> <code>Optional[str]</code> <p>Identifier of the message this one replies to.</p> <code>from_user</code> <code>EnvelopeAuthor</code> <p>Shortcut for accessing the message author.</p> <code>content_type</code> <code>MessageType</code> <p>Returns the type of the message.</p> <code>text</code> <code>Optional[str]</code> <p>Returns the message text if it contains text, else None.</p> <code>document</code> <code>Optional[Document]</code> <p>Returns a document attachment if the message contains a non-media file (not photo, video, sticker).</p> <code>photo</code> <code>Optional[Photo]</code> <p>Returns a photo attachment if available.</p> <code>video</code> <code>Optional[Video]</code> <p>Returns a video attachment if available.</p> <code>sticker</code> <code>Optional[Sticker]</code> <p>Returns a sticker attachment if available.</p> <p>Methods:</p> Name Description <code>answer</code> <p>Sends a text message in the same chat.</p> <code>reply</code> <p>Sends a reply message referencing the current one.</p> <code>forward</code> <p>Forwards the current message to another chat.</p> <code>copy_to</code> <p>Sends a copy of the current message (text-only).</p> <code>answer_photo</code> <p>Sends a photo to the current chat.</p> <code>answer_document</code> <p>Sends a document to the current chat.</p> <code>answer_sticker</code> <p>Sends a sticker to the current chat.</p> <code>delete</code> <p>Deletes the current message from the chat.</p>"},{"location":"reference/Types/#trueconf.types.Message.author","title":"author  <code>instance-attribute</code>","text":"<pre><code>author\n</code></pre>"},{"location":"reference/Types/#trueconf.types.Message.box","title":"box  <code>instance-attribute</code>","text":"<pre><code>box\n</code></pre>"},{"location":"reference/Types/#trueconf.types.Message.chat_id","title":"chat_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>chat_id = field(metadata={'alias': 'chatId'})\n</code></pre>"},{"location":"reference/Types/#trueconf.types.Message.content","title":"content  <code>instance-attribute</code>","text":"<pre><code>content\n</code></pre>"},{"location":"reference/Types/#trueconf.types.Message.content_type","title":"content_type  <code>property</code>","text":"<pre><code>content_type\n</code></pre> <p>Returns the type of the current message content.</p> <p>Returns:</p> Name Type Description <code>MessageType</code> <code>MessageType</code> <p>Message content type (e.g., TEXT, ATTACHMENT).</p>"},{"location":"reference/Types/#trueconf.types.Message.document","title":"document  <code>property</code>","text":"<pre><code>document\n</code></pre> <p>Returns the attached document if the message contains a non-media file.</p> <p>Use this property only for documents that are not photos, videos, or stickers. For media attachments, use the corresponding properties: <code>photo</code>, <code>video</code>, or <code>sticker</code>. If you need to handle any attached file (including media), use <code>message.content</code> directly.</p> <p>Returns:</p> Type Description <code>Optional['Document']</code> <p>Optional[Document]: Document attachment bound to the bot, or None if not applicable.</p>"},{"location":"reference/Types/#trueconf.types.Message.from_user","title":"from_user  <code>property</code>","text":"<pre><code>from_user\n</code></pre> <p>Returns the author of the current message.</p> <p>Returns:</p> Name Type Description <code>EnvelopeAuthor</code> <code>EnvelopeAuthor</code> <p>Shortcut for accessing the message author.</p>"},{"location":"reference/Types/#trueconf.types.Message.is_edited","title":"is_edited  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_edited = field(metadata={'alias': 'isEdited'})\n</code></pre>"},{"location":"reference/Types/#trueconf.types.Message.message_id","title":"message_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>message_id = field(metadata={'alias': 'messageId'})\n</code></pre>"},{"location":"reference/Types/#trueconf.types.Message.photo","title":"photo  <code>property</code>","text":"<pre><code>photo\n</code></pre> <p>Returns the attached photo object if the current message contains an image.</p> <p>This is a shortcut for accessing photo metadata from image attachments.</p> <p>Returns:</p> Type Description <code>Optional['Photo']</code> <p>Optional[Photo]: A <code>Photo</code> object bound to the bot, or None if the message does not contain an image.</p>"},{"location":"reference/Types/#trueconf.types.Message.reply_message_id","title":"reply_message_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>reply_message_id = field(default=None, metadata={'alias': 'replyMessageId'})\n</code></pre>"},{"location":"reference/Types/#trueconf.types.Message.sticker","title":"sticker  <code>property</code>","text":"<pre><code>sticker\n</code></pre> <p>Returns the attached sticker object if the current message contains a sticker.</p> <p>Returns:</p> Type Description <code>Optional['Sticker']</code> <p>Optional[Sticker]: A <code>Sticker</code> object bound to the bot, or None if the message does not contain a sticker.</p>"},{"location":"reference/Types/#trueconf.types.Message.text","title":"text  <code>property</code>","text":"<pre><code>text\n</code></pre> <p>Returns the text of the current message if present.</p> <p>Returns:</p> Type Description <code>str | None</code> <p>Optional[str]: Message text, or None if the message has no text content.</p>"},{"location":"reference/Types/#trueconf.types.Message.timestamp","title":"timestamp  <code>instance-attribute</code>","text":"<pre><code>timestamp\n</code></pre>"},{"location":"reference/Types/#trueconf.types.Message.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type\n</code></pre>"},{"location":"reference/Types/#trueconf.types.Message.video","title":"video  <code>property</code>","text":"<pre><code>video\n</code></pre> <p>Returns the attached video object if the current message contains a video.</p> <p>This is a shortcut for accessing video metadata from video attachments.</p> <p>Returns:</p> Type Description <code>Optional['Video']</code> <p>Optional[Video]: A <code>Video</code> object bound to the bot, or None if the message does not contain a video.</p>"},{"location":"reference/Types/#trueconf.types.Message.answer","title":"answer  <code>async</code>","text":"<pre><code>answer(text, parse_mode=HTML)\n</code></pre> <p>Shortcut for the <code>send_message</code> method of the bot instance. Use this method to send a text message to the current chat.</p> Automatically fills the following attributes <ul> <li><code>chat_id</code></li> </ul> Source <p>trueconf.com/docs/chatbot-connector/en/messages/#sendMessage</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text of the message to be sent.</p> required <code>parse_mode</code> <code>ParseMode | str</code> <p>Text formatting mode. Defaults to HTML.</p> <code>HTML</code> <p>Returns:</p> Name Type Description <code>SendMessageResponse</code> <code>object</code> <p>Object containing the result of the message delivery.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; @&lt;router&gt;.message()\n&gt;&gt;&gt; async def on_message(message:Message):\n&gt;&gt;&gt;     await message.answer(\"Hi, there!\")\n</code></pre> <pre><code>&gt;&gt;&gt; @&lt;router&gt;.message()\n&gt;&gt;&gt; async def on_message(message:Message):\n&gt;&gt;&gt;     await message.answer(\"Hi, **there!**\", parse_mode=ParseMode.MARKDOWN)\n</code></pre>"},{"location":"reference/Types/#trueconf.types.Message.answer_document","title":"answer_document  <code>async</code>","text":"<pre><code>answer_document(file_path)\n</code></pre> <p>Shortcut for the <code>send_document</code> method of the bot instance. Use this method to send a document in response to the current message.</p> Automatically fills the following attributes <ul> <li><code>chat_id</code></li> </ul> Source <p>trueconf.com/docs/chatbot-connector/en/files/#working-with-files</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Path to the document file.</p> required <p>Returns:</p> Name Type Description <code>SendFileResponse</code> <code>object</code> <p>Object containing the result of the document upload.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; @&lt;router&gt;.message()\n&gt;&gt;&gt; async def on_message(message:Message):\n&gt;&gt;&gt;     await message.answer_sticker(file_path='/path/to/file.webp')\n</code></pre>"},{"location":"reference/Types/#trueconf.types.Message.answer_photo","title":"answer_photo  <code>async</code>","text":"<pre><code>answer_photo(file_path, preview_path)\n</code></pre> <p>Shortcut for the <code>send_photo</code> method of the bot instance. Use this method to send a photo in response to the current message.</p> Automatically fills the following attributes <ul> <li><code>chat_id</code></li> </ul> Source <p>trueconf.com/docs/chatbot-connector/en/files/#sending-an-image</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Path to the image file (supported formats: <code>.jpg</code>, <code>.jpeg</code>, <code>.png</code>, <code>.webp</code>, <code>.bmp</code>, <code>.gif</code>, <code>.tiff</code>).</p> required <code>preview_path</code> <code>str | None</code> <p>Path to the preview image.</p> required <p>Returns:</p> Name Type Description <code>SendFileResponse</code> <code>object</code> <p>Object containing the result of the photo upload.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; @&lt;router&gt;.message()\n&gt;&gt;&gt; async def on_message(message:Message):\n&gt;&gt;&gt;     await message.answer_photo(file_path='/path/to/file.jpg', preview_path='/path/to/preview.jpg')\n</code></pre>"},{"location":"reference/Types/#trueconf.types.Message.answer_sticker","title":"answer_sticker  <code>async</code>","text":"<pre><code>answer_sticker(file_path)\n</code></pre> <p>Shortcut for the <code>send_sticker</code> method of the bot instance. Use this method to send a sticker in response to the current message.</p> Automatically fills the following attributes <ul> <li><code>chat_id</code></li> </ul> Source <p>trueconf.com/docs/chatbot-connector/en/files/#upload-file-to-server-storage</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Path to the sticker file (must be in WebP format).</p> required <p>Returns:</p> Name Type Description <code>SendFileResponse</code> <code>object</code> <p>Object containing the result of the sticker delivery.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; @&lt;router&gt;.message()\n&gt;&gt;&gt; async def on_message(message:Message):\n&gt;&gt;&gt;     await message.answer_sticker(file_path='/path/to/file.webp')\n</code></pre>"},{"location":"reference/Types/#trueconf.types.Message.copy_to","title":"copy_to  <code>async</code>","text":"<pre><code>copy_to(chat_id)\n</code></pre> <p>Shortcut for the <code>send_message</code> method of the bot instance. Use this method to send a copy of the current message (without metadata or reply context) to another chat.</p> Automatically fills the following attributes <ul> <li><code>text</code></li> <li><code>parse_mode</code></li> </ul> Source <p>trueconf.com/docs/chatbot-connector/en/messages/#sendMessage</p> <p>Parameters:</p> Name Type Description Default <code>chat_id</code> <code>str</code> <p>Identifier of the target chat to send the copied message to.</p> required <p>Returns:</p> Name Type Description <code>SendMessageResponse</code> <code>object</code> <p>Object containing the result of the message delivery.</p>"},{"location":"reference/Types/#trueconf.types.Message.delete","title":"delete  <code>async</code>","text":"<pre><code>delete(for_all=False)\n</code></pre> <p>Shortcut for the <code>remove_message</code> method of the bot instance. Use this method to delete the current message from the chat.</p> Automatically fills the following attributes <ul> <li><code>message_id</code></li> </ul> Source <p>trueconf.com/docs/chatbot-connector/en/messages/#removeMessage</p> <p>Parameters:</p> Name Type Description Default <code>for_all</code> <code>bool</code> <p>If True, delete the message for all participants. Defaults to False (deletes only for the bot).</p> <code>False</code> <p>Returns:</p> Name Type Description <code>RemoveMessageResponse</code> <code>object</code> <p>Object containing the result of the message deletion.</p>"},{"location":"reference/Types/#trueconf.types.Message.forward","title":"forward  <code>async</code>","text":"<pre><code>forward(chat_id)\n</code></pre> <p>Shortcut for the <code>forward_message</code> method of the bot instance. Use this method to forward the current message to another chat.</p> Automatically fills the following attributes <ul> <li><code>message_id</code></li> </ul> Source <p>trueconf.com/docs/chatbot-connector/en/messages/#forwardMessage</p> <p>Parameters:</p> Name Type Description Default <code>chat_id</code> <code>str</code> <p>Identifier of the target chat to forward the message to.</p> required <p>Returns:</p> Name Type Description <code>ForwardMessageResponse</code> <code>object</code> <p>Object containing the result of the message forwarding.</p>"},{"location":"reference/Types/#trueconf.types.Message.reply","title":"reply  <code>async</code>","text":"<pre><code>reply(text, parse_mode=HTML)\n</code></pre> <p>Shortcut for the <code>reply_message</code> method of the bot instance. Use this method to send a reply message to the current chat.</p> Automatically fills the following attributes <ul> <li><code>chat_id</code></li> <li><code>reply_message_id</code></li> </ul> <p>Source: trueconf.com/docs/chatbot-connector/en/messages/#replyMessage</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text of the reply message.</p> required <code>parse_mode</code> <code>ParseMode | str</code> <p>Text formatting mode. Defaults to HTML.</p> <code>HTML</code> <p>Returns:</p> Name Type Description <code>SendMessageResponse</code> <code>object</code> <p>Object containing the result of the message delivery.</p>"},{"location":"reference/Types/#trueconf.types.RemovedChat","title":"trueconf.types.RemovedChat  <code>dataclass</code>","text":"<pre><code>RemovedChat(chat_id)\n</code></pre> <p>               Bases: <code>BoundToBot</code>, <code>DataClassDictMixin</code></p> <p>Event type: a chat was removed.</p> <p>This object is received in the handler when a private, group, channel, or conference chat is deleted.</p> Notes <p>This class is used as the event type in handler functions decorated with <code>@&lt;router&gt;.removed_chat()</code>.</p> Source <p>trueconf.com/docs/chatbot-connector/en/server-requests/#removeChat</p> <p>Attributes:</p> Name Type Description <code>chat_id</code> <code>str</code> <p>Unique identifier of the chat that was removed.</p> <p>Examples:</p> <pre><code>from trueconf.types import RemovedChat\n\n@&lt;router&gt;.removed_chat()\nasync def on_removed(event: RemovedChat):\n    print(f\"Chat removed: {event.chat_id}\")\n</code></pre>"},{"location":"reference/Types/#trueconf.types.RemovedChat.chat_id","title":"chat_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>chat_id = field(metadata={'alias': 'chatId'})\n</code></pre>"},{"location":"reference/Types/#trueconf.types.RemovedChatParticipant","title":"trueconf.types.RemovedChatParticipant  <code>dataclass</code>","text":"<pre><code>RemovedChatParticipant(timestamp, chat_id, user_id, removed_by)\n</code></pre> <p>               Bases: <code>BoundToBot</code>, <code>DataClassDictMixin</code></p> <p>Event type: a participant was removed from a chat.</p> <p>This object is received in the handler when a user is removed from a group, channel, or conference chat.</p> Notes <p>This class is used as the event type in handler functions decorated with <code>@&lt;router&gt;.removed_chat_participant()</code>.</p> Source <p>trueconf.com/docs/chatbot-connector/en/server-requests/#removeChatParticipant</p> <p>Attributes:</p> Name Type Description <code>timestamp</code> <code>int</code> <p>Unix timestamp (milliseconds) of when the event occurred.</p> <code>chat_id</code> <code>str</code> <p>Unique identifier of the chat where the participant was removed.</p> <code>user_id</code> <code>str</code> <p>TrueConf ID of the participant who was removed.</p> <code>removed_by</code> <code>EnvelopeAuthor</code> <p>Information about the user who removed the participant.</p> <p>Examples:</p> <pre><code>from trueconf.types import RemovedChatParticipant\n\n@&lt;router&gt;.removed_chat_participant()\nasync def on_removed(event: RemovedChatParticipant):\n    print(event.user_id)\n</code></pre>"},{"location":"reference/Types/#trueconf.types.RemovedChatParticipant.chat_id","title":"chat_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>chat_id = field(metadata={'alias': 'chatId'})\n</code></pre>"},{"location":"reference/Types/#trueconf.types.RemovedChatParticipant.removed_by","title":"removed_by  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>removed_by = field(metadata={'alias': 'removedBy'})\n</code></pre>"},{"location":"reference/Types/#trueconf.types.RemovedChatParticipant.timestamp","title":"timestamp  <code>instance-attribute</code>","text":"<pre><code>timestamp\n</code></pre>"},{"location":"reference/Types/#trueconf.types.RemovedChatParticipant.user_id","title":"user_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>user_id = field(metadata={'alias': 'userId'})\n</code></pre>"},{"location":"reference/Types/#trueconf.types.RemovedMessage","title":"trueconf.types.RemovedMessage  <code>dataclass</code>","text":"<pre><code>RemovedMessage(chat_id, message_id, removed_by)\n</code></pre> <p>               Bases: <code>BoundToBot</code>, <code>DataClassDictMixin</code></p> <p>Event type: a message was removed.</p> <p>This object is received in the handler when a message is deleted from a chat.</p> Notes <p>This class is used as the event type in handler functions decorated with <code>@&lt;router&gt;.removed_message()</code>.</p> Source <p>trueconf.com/docs/chatbot-connector/en/server-requests/#removeMessage</p> <p>Attributes:</p> Name Type Description <code>chat_id</code> <code>str</code> <p>Unique identifier of the chat from which the message was removed.</p> <code>message_id</code> <code>str</code> <p>Unique identifier of the removed message.</p> <code>removed_by</code> <code>EnvelopeAuthor</code> <p>Information about the user who removed the message.</p> <p>Examples:</p> <pre><code>from trueconf.types import RemovedMessage\n\n@&lt;router&gt;.removed_message()\nasync def on_removed(event: RemovedMessage):\n    print(f\"Message {event.message_id} removed from chat {event.chat_id}\")\n</code></pre>"},{"location":"reference/Types/#trueconf.types.RemovedMessage.chat_id","title":"chat_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>chat_id = field(metadata={'alias': 'chatId'})\n</code></pre>"},{"location":"reference/Types/#trueconf.types.RemovedMessage.message_id","title":"message_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>message_id = field(metadata={'alias': 'messageId'})\n</code></pre>"},{"location":"reference/Types/#trueconf.types.RemovedMessage.removed_by","title":"removed_by  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>removed_by = field(metadata={'alias': 'removedBy'})\n</code></pre>"},{"location":"reference/Types/#trueconf.types.Update","title":"trueconf.types.Update  <code>dataclass</code>","text":"<pre><code>Update(method, type, id, payload)\n</code></pre> <p>               Bases: <code>BoundToBot</code>, <code>DataClassDictMixin</code></p>"},{"location":"reference/Types/#trueconf.types.Update.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id\n</code></pre>"},{"location":"reference/Types/#trueconf.types.Update.method","title":"method  <code>instance-attribute</code>","text":"<pre><code>method\n</code></pre>"},{"location":"reference/Types/#trueconf.types.Update.payload","title":"payload  <code>instance-attribute</code>","text":"<pre><code>payload\n</code></pre>"},{"location":"reference/Types/#trueconf.types.Update.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type\n</code></pre>"},{"location":"reference/Types/#trueconf.types.UploadingProgress","title":"trueconf.types.UploadingProgress  <code>dataclass</code>","text":"<pre><code>UploadingProgress(file_id, progress)\n</code></pre> <p>               Bases: <code>BoundToBot</code>, <code>DataClassDictMixin</code></p> <p>Event type: file upload progress.</p> <p>This object is received in the handler when a file is being uploaded and the upload progress is updated.</p> Notes <p>This class is used as the event type in handler functions decorated with <code>@&lt;router&gt;.uploading_progress()</code>.</p> Source <p>trueconf.com/docs/chatbot-connector/en/server-requests/#uploadingProgress</p> <p>Attributes:</p> Name Type Description <code>file_id</code> <code>str</code> <p>Unique identifier of the file being uploaded.</p> <code>progress</code> <code>int</code> <p>Number of bytes uploaded to the server.</p> <p>Examples:</p> <pre><code>from trueconf.types import UploadingProgress\n\n@&lt;router&gt;.uploading_progress()\nasync def on_progress(event: UploadingProgress):\n    print(f\"File {event.file_id}: uploaded {event.progress} bytes\")\n</code></pre>"},{"location":"reference/Types/#trueconf.types.UploadingProgress.file_id","title":"file_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>file_id = field(metadata={'alias': 'fileId'})\n</code></pre>"},{"location":"reference/Types/#trueconf.types.UploadingProgress.progress","title":"progress  <code>instance-attribute</code>","text":"<pre><code>progress\n</code></pre>"},{"location":"ru/","title":"Python-\u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 TrueConf Chatbot Connector","text":"<p>python-trueconf-bot \u2014 \u044d\u0442\u043e \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f Python-\u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0434\u043b\u044f API \u0447\u0430\u0442-\u0431\u043e\u0442\u043e\u0432 TrueConf Server, \u0432\u0434\u043e\u0445\u043d\u043e\u0432\u043b\u0451\u043d\u043d\u0430\u044f \u0444\u0438\u043b\u043e\u0441\u043e\u0444\u0438\u0435\u0439 aiogram. \u0415\u0441\u043b\u0438 \u0432\u044b \u043a\u043e\u0433\u0434\u0430-\u0442\u043e \u043f\u0438\u0441\u0430\u043b\u0438 \u0431\u043e\u0442\u0430 \u0434\u043b\u044f Telegram \u043d\u0430 aiogram \u2014 \u043f\u0435\u0440\u0435\u0445\u043e\u0434 \u043d\u0430 TrueConf \u0431\u0443\u0434\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u044b\u043c \u0438 \u0431\u0435\u0437\u0431\u043e\u043b\u0435\u0437\u043d\u0435\u043d\u043d\u044b\u043c.</p>"},{"location":"ru/#_1","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430","text":""},{"location":"ru/#_2","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f","text":"<ul> <li>Python 3.10+</li> <li>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u041e\u0421: Linux, macOS, Windows</li> <li>\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c virtualenv \u0438\u043b\u0438 poetry \u0434\u043b\u044f \u0438\u0437\u043e\u043b\u044f\u0446\u0438\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439</li> </ul>"},{"location":"ru/#pip","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0447\u0435\u0440\u0435\u0437 pip","text":"<pre><code>pip install git+https://github.com/TrueConf/python-trueconf-bot\n</code></pre>"},{"location":"ru/#aiogram","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441 aiogram","text":"\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c aiogram (Telegram) python-trueconf-bot (TrueConf) \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c asyncio asyncio \u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b \u0434\u043b\u044f \u0440\u043e\u0443\u0442\u0438\u043d\u0433\u0430 <code>@router.message(...)</code> <code>@router.message(...)</code> \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 <code>F.text</code>, <code>F.photo</code>, <code>F.document</code> <code>F.text</code>, <code>F.photo</code>, <code>F.document</code> Magic-filter \u2705 \u2705 \u0410\u043b\u0438\u0430\u0441\u044b (\u0448\u043e\u0440\u0442\u043a\u0430\u0442\u044b) <code>message.answer()</code>, <code>message.reply()</code> <code>message.answer()</code>, <code>message.reply()</code> \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u043e\u0442\u0430 <code>Bot(token=\"...\")</code> <code>Bot(server,token=\"...\")</code> \u0438\u043b\u0438 <code>Bot.from_credentials(server, login, password)</code> JSON \u2192 Python Pydantic models Mashumaro dataclasses \u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442 HTTPS + long polling / webhook \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 WebSocket \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438 <code>bot.get_file(...)</code> + <code>bot.download_file(...)</code> <code>message.photo.download()</code>, <code>message.document.download()</code>, <code>bot.download_file_by_id(...)</code> <ul> <li>\u0415\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0443\u0436\u0435 \u0435\u0441\u0442\u044c \u043e\u043f\u044b\u0442 \u0441 aiogram \u2014 \u043a\u043e\u0434 \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043f\u043e\u0447\u0442\u0438 \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439.</li> <li>TrueConf API \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u00ab\u0447\u0435\u043b\u043e\u0432\u0435\u0447\u0435\u0441\u043a\u0438\u043c\u00bb: \u0432\u043c\u0435\u0441\u0442\u043e JSON-\u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439 \u0432\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\u0435 \u0441 Python-\u043a\u043b\u0430\u0441\u0441\u0430\u043c\u0438.</li> <li>\u0412\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0435 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0431\u043e\u0442\u043e\u0432 \u0432 \u043a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u0447\u0430\u0442\u044b TrueConf.</li> </ul>"},{"location":"ru/features/","title":"\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438","text":""},{"location":"ru/features/#asyncio","title":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 asyncio","text":"<p>\u0412\u0441\u0451 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043e \u043d\u0430 async/await. \u0412\u044b\u0441\u043e\u043a\u0430\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043e\u043a. </p>"},{"location":"ru/features/#aiogram","title":"\u041f\u043e\u0445\u043e\u0436\u0435\u0441\u0442\u044c \u043d\u0430 aiogram","text":"<p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0437\u043d\u0430\u043a\u043e\u043c\u044b\u0435 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438: Router, \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b, \u0448\u043e\u0440\u0442\u043a\u0430\u0442\u044b (message.answer, message.reply), \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u0438 \u0434\u0430\u0436\u0435 magic-filter (F.text, F.document, F.photo). </p>"},{"location":"ru/features/#_2","title":"\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439","text":"<p>\u0412\u0441\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 JSON \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0432 \u043a\u043b\u0430\u0441\u0441\u044b Python (Message, AttachmentContent, UploadingProgress \u0438 \u0434\u0440.), \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u043e\u0441\u0442\u0430 \u0438 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0430. </p>"},{"location":"ru/features/#_3","title":"\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b \u0434\u043b\u044f \u0440\u043e\u0443\u0442\u0438\u043d\u0433\u0430","text":"<p>\u0420\u043e\u0443\u0442\u0435\u0440 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u044d\u043b\u0435\u0433\u0430\u043d\u0442\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0441\u043e\u0431\u044b\u0442\u0438\u044f:</p> <pre><code>from trueconf import Router, Message\nfrom trueconf.enums import MessageType\nfrom trueconf.filters import F\n\nrouter = Router()\n\n@router.message(F.text.startswith(\"/start\"))\nasync def on_start(msg: Message):\n  await msg.answer(\"\u041f\u0440\u0438\u0432\u0435\u0442! \u042f TrueConf \u0431\u043e\u0442 \ud83d\udc4b\")\n\n@router.message(F.document.mime_type == \"application/pdf\")\nasync def on_pdf(msg: Message):\n  await msg.reply(\"\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 PDF!\")\n</code></pre>"},{"location":"ru/features/#_4","title":"\u0414\u0432\u0430 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f","text":"<ol> <li> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 JWT-\u0442\u043e\u043a\u0435\u043d:     <pre><code>bot = Bot(server=\"video.example.com\", token=\"...\")\n</code></pre></p> </li> <li> <p>\u0438\u043b\u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043b\u043e\u0433\u0438\u043d\u0430 \u0438 \u043f\u0430\u0440\u043e\u043b\u044f:     <pre><code>bot = Bot.from_credentials(server, username, password)\n</code></pre></p> </li> </ol>"},{"location":"ru/features/#aiogram_1","title":"\u0410\u043b\u0438\u0430\u0441\u044b \u0438 \u0448\u043e\u0440\u0442\u043a\u0430\u0442\u044b \u0432 \u0441\u0442\u0438\u043b\u0435 aiogram","text":"<p>\u0414\u043b\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u043f\u0440\u0438\u0432\u044b\u0447\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b:</p> <pre><code>await msg.answer(\"\u0422\u0435\u043a\u0441\u0442 \u0432 \u0447\u0430\u0442\")\nawait msg.reply(\"\u041e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\")\nawait msg.copy_to(chat_id=\"other_chat\")\n</code></pre>"},{"location":"ru/features/#_5","title":"\u041c\u043d\u043e\u0433\u043e\u0431\u043e\u0442\u043d\u043e\u0441\u0442\u044c","text":"<p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u043e\u0442\u043e\u0432 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0438 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e.</p>"},{"location":"ru/features/#websocket","title":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442 \u2014 WebSocket","text":"<p>\u0412\u0441\u0451 \u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0447\u0435\u0440\u0435\u0437 WebSocket. \u042d\u0442\u043e \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0435\u0435 \u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0445 REST-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.</p>"},{"location":"ru/features/#magic-filter-aiogram","title":"Magic-filter, \u043a\u0430\u043a \u0432 aiogram","text":"<p>\u0422\u043e\u0447\u043d\u043e \u0442\u0430\u043a \u0436\u0435, \u043a\u0430\u043a \u0432 aiogram:</p> <pre><code>@router.message(F.photo)\nasync def on_photo(msg: Message): ...\n\n@router.message(F.document.mime_type.in_([\"application/pdf\", \"application/msword\"]))\nasync def on_doc(msg: Message): ...\n</code></pre>"},{"location":"ru/features/#_6","title":"\u0424\u0430\u0439\u043b\u044b \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438","text":"<p>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0430\u043d\u0430 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0438 \u0441\u043a\u0430\u0447\u0438\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432. \u041c\u043e\u0436\u043d\u043e \u0441\u043a\u0430\u0447\u0438\u0432\u0430\u0442\u044c \u0444\u0430\u0439\u043b \u0432\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0438\u043b\u0438 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u043f\u0443\u0442\u0438.</p> <pre><code>path = await bot.download_file_by_id(file_id)\nawait msg.answer(f\"\u0424\u0430\u0439\u043b \u0441\u043a\u0430\u0447\u0430\u043d \u0432 {path}\")\n</code></pre>"},{"location":"ru/features/#api","title":"\u0412\u0441\u0435 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b API","text":"<p>\u0412 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0432\u0441\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b TrueConf API: \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430/\u0441\u043a\u0430\u0447\u0438\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432, \u043e\u043f\u0440\u043e\u0441\u044b, \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438, \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c\u0438 \u0438 \u043f\u0440.</p>"},{"location":"ru/examples/echo_bot/","title":"\u042d\u0445\u043e-\u0431\u043e\u0442","text":"<pre><code>import asyncio\nfrom trueconf import Bot, Dispatcher, Router, Message, F, ParseMode\nfrom os import getenv\n\nrouter = Router()\ndp = Dispatcher()\ndp.include_router(router)\n\nTOKEN = getenv(\"TOKEN\")\n\nbot = Bot(server=\"video.example.com\", token=TOKEN, dispatcher=dp)\n\n\n@router.message(F.text)\nasync def echo(msg: Message):\n    await msg.answer(f\"You says: **{msg.text}**\", parse_mode=ParseMode.MARKDOWN)\n\n\nasync def main():\n    await bot.run()\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/examples/multibot/","title":"\u041c\u0443\u043b\u044c\u0442\u0438\u0431\u043e\u0442","text":"<p>\u041a\u043e\u043c\u0430\u043d\u0434\u0430 TrueConf \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u043b\u0430 \u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0440\u0430\u0437\u0443 4 \u0431\u043e\u0442\u043e\u0432 (all-in-one):</p> <ul> <li>\u044d\u0445\u043e-\u0431\u043e\u0442;</li> <li>\u0431\u043e\u043b\u044c\u043d\u0438\u0447\u043d\u044b\u0439-\u0431\u043e\u0442, \u043a\u043e\u0440\u044b\u0439 \u043f\u0435\u0440\u0435\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u0433\u0440\u0443\u043f\u043f\u0443 \u0441 HR; </li> <li>\u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433-\u0431\u043e\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430 (TrueConf Server);</li> <li>gpt-\u0431\u043e\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432 \u0444\u043e\u043d\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u0443\u044e LLM-\u043c\u043e\u0434\u0435\u043b\u044c.</li> </ul> <p>\u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 </p>"},{"location":"ru/learn/enums/","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u0447\u0435\u0441\u043b\u0435\u043d\u0438\u0439","text":"<p>\u0412 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 python-trueconf-bot \u043c\u043d\u043e\u0433\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u0447\u0435\u0440\u0435\u0437 enums (\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f). \u042d\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0438 \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043e\u0448\u0438\u0431\u043e\u043a \u043f\u0440\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0435 \u00ab\u043c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0441\u0442\u0440\u043e\u043a\u00bb \u0438\u043b\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043a\u043e\u0434\u043e\u0432.</p> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0440\u0430\u0437\u0443 \u0432\u0441\u0451:</p> <pre><code>from trueconf.enums import *\n</code></pre> <p>\u0418\u043b\u0438 \u0442\u043e\u0447\u0435\u0447\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0443\u0436\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f:</p> <pre><code>from trueconf.enums import ParseMode, FileReadyState\n</code></pre> <p>\u0414\u043b\u044f \u0447\u0435\u0433\u043e \u043d\u0443\u0436\u043d\u044b enums?</p> <ul> <li>\u043f\u043e\u0432\u044b\u0448\u0430\u044e\u0442 \u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u044c \u043a\u043e\u0434\u0430;</li> <li>\u0438\u0441\u043a\u043b\u044e\u0447\u0430\u044e\u0442 \u043e\u043f\u0435\u0447\u0430\u0442\u043a\u0438 \u0432 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u0445;</li> <li>\u0434\u0430\u044e\u0442 \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0438 \u0432 IDE (\u0430\u0432\u0442\u043e\u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435);</li> <li>\u044f\u0432\u043d\u043e \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442, \u043a\u0430\u043a\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b.</li> </ul> <p>Tip</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f\u043c\u0438 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u0441 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435.</p>"},{"location":"ru/learn/enums/#_2","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":""},{"location":"ru/learn/enums/#_3","title":"\u0424\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0435\u043a\u0441\u0442\u0430","text":"<pre><code>from trueconf.enums import ParseMode\n\n@r.message()\nasync def on_message(message: Message):\n    await message.answer(\n        \"Hello, *world*!\",\n        parse_mode=ParseMode.MARKDOWN\n)\n</code></pre> <p>\u0412\u043c\u0435\u0441\u0442\u043e \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u043f\u0438\u0441\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 <code>\"Markdown\"</code>, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f <code>ParseMode.MARKDOWN</code>.</p>"},{"location":"ru/learn/enums/#_4","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438","text":"<pre><code>from trueconf.enums import FileReadyState\n\ninfo = await bot.get_file_info(file_id=\"abc123\")\n\nif info.ready_state == FileReadyState.READY:\n    await bot.download_file_by_id(info.file_id, \"./downloads\")\nelif info.ready_state == FileReadyState.NOT_AVAILABLE:\n    print(\"File is not available\")\n</code></pre>"},{"location":"ru/learn/enums/#_5","title":"\u0422\u0438\u043f\u044b \u0447\u0430\u0442\u043e\u0432","text":"<pre><code>from trueconf.enums import ChatType\n\nif chat_type == ChatType.GROUP:\n    await bot.send_message(\"This is a group chat\")\n</code></pre> <p>\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, enums \u043f\u043e\u043c\u043e\u0433\u0430\u044e\u0442 \u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u0434 \u0447\u0438\u0449\u0435 \u0438 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0435\u0435.</p>"},{"location":"ru/learn/filters/","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u044b","text":"<p>\u0424\u0438\u043b\u044c\u0442\u0440\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b \u0434\u043b\u044f \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u043a \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u043e\u043c\u0443 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0443.  \u041f\u043e\u0438\u0441\u043a \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0432\u0441\u0435\u0433\u0434\u0430 \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u043f\u0435\u0440\u0432\u043e\u043c \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0438 \u0441 \u043d\u0430\u0431\u043e\u0440\u043e\u043c \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432.  \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0432\u0441\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0438\u043c\u0435\u044e\u0442 \u043f\u0443\u0441\u0442\u043e\u0439 \u043d\u0430\u0431\u043e\u0440 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u0441\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0443\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u044b \u043f\u0435\u0440\u0432\u043e\u043c\u0443 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0443 \u0441 \u043f\u0443\u0441\u0442\u044b\u043c \u043d\u0430\u0431\u043e\u0440\u043e\u043c \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432.</p> <p>Tip</p> <p>\u041d\u0430\u0448\u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u044b, \u0442\u0430\u043a\u0436\u0435 \u043a\u0430\u043a \u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u044b aiogram, \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u044b \u043d\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 magic-filter.</p>"},{"location":"ru/learn/filters/#_2","title":"\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432","text":"<p>\u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 \u043f\u043e\u0434\u0440\u044f\u0434, \u043e\u043d\u0438 \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u0435\u043d\u044b \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c \u00ab\u0438\u00bb:</p> <pre><code>@&lt;router&gt;.message(F.from_user.id == \"bots_ru@video.example.com\", F.text == 'admin')\n</code></pre> <p>\u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u0435\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0430 \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u0441\u043f\u043e\u0441\u043e\u0431\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u0438 \u0442\u043e\u0433\u043e \u0436\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 (\u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u00ab\u0438\u043b\u0438\u00bb),  \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0434\u0432\u0430 \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0437 \u043f\u043e \u0432\u0430\u0448\u0435\u043c\u0443 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u044e.</p> <pre><code>@&lt;router&gt;.message(F.text == \"hi\")\n@&lt;router&gt;.message(Command(\"/start\"))\n</code></pre>"},{"location":"ru/learn/filters/#magicfilter","title":"MagicFilter","text":"<p>MagicFilter \u2014 \u044d\u0442\u043e \u043c\u043e\u0449\u043d\u044b\u0439 \u0438 \u0433\u0438\u0431\u043a\u0438\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0438\u0437 \u043f\u0430\u043a\u0435\u0442\u0430 magic-filter, \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0432 python-trueconf-bot.  \u041e\u043d \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0432\u044b\u0440\u0430\u0437\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0438 \u0446\u0435\u043f\u043e\u0447\u0435\u0447\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b, \u0443\u043f\u0440\u043e\u0449\u0430\u044e\u0449\u0438\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u044e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432 \u0432\u0430\u0448\u0435\u043c \u0431\u043e\u0442\u0435. \u0412\u043c\u0435\u0441\u0442\u043e \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u043f\u043e\u043b\u044f \u0430\u043f\u0434\u0435\u0439\u0442\u0430 \u0432\u043d\u0443\u0442\u0440\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430, \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c \u043f\u0440\u044f\u043c\u043e \u0432 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0435.</p> <p>\u0424\u0438\u043b\u044c\u0442\u0440 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u00ab\u043b\u0435\u043d\u0438\u0432\u043e\u00bb: \u043f\u0440\u0438 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u0441\u0430\u043c\u0430 \u0446\u0435\u043f\u043e\u0447\u043a\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u043a, \u0430 \u043d\u0435 \u0435\u0451 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.  \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043c\u043e\u043c\u0435\u043d\u0442, \u043a\u043e\u0433\u0434\u0430 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 \u043d\u043e\u0432\u043e\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0435, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u043b\u0435\u0433\u043a\u043e \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0438 \u043e\u0441\u0442\u0430\u044e\u0442\u0441\u044f \u0447\u0438\u0442\u0430\u0435\u043c\u044b\u043c\u0438.  \u0422\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0434\u0435\u043b\u0430\u0435\u0442 \u043a\u043e\u0434 \u043a\u043e\u0440\u043e\u0447\u0435 \u0438 \u043f\u043e\u043d\u044f\u0442\u043d\u0435\u0435: \u0441\u0440\u0430\u0437\u0443 \u0432\u0438\u0434\u043d\u043e, \u043a\u0430\u043a\u0438\u0435 \u0438\u043c\u0435\u043d\u043d\u043e \u0430\u043f\u0434\u0435\u0439\u0442\u044b \u043f\u0440\u043e\u0439\u0434\u0443\u0442 \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a.</p> <p>\u0418\u0434\u0435\u044f MagicFilter \u043f\u0440\u043e\u0441\u0442\u0430: \u0432\u044b \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0435 \u0446\u0435\u043f\u043e\u0447\u043a\u0443 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u0435, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0435 \u0435\u0451 \u043a \u043e\u0431\u044a\u0435\u043a\u0442\u0443.  \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u044c\u0442\u0435, \u0447\u0442\u043e \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438. \u0412\u043c\u0435\u0441\u0442\u043e \u0440\u0443\u0447\u043d\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0432\u0438\u0434\u0430 <code>if obj.foo.bar.baz == \"spam\": ...</code> \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u0444\u0438\u043b\u044c\u0442\u0440 \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0442\u0438\u0432\u043d\u043e:</p> <pre><code>F.foo.bar.baz == \"spam\"\n</code></pre> <p>\u041f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0439\u0441\u044f \u0444\u0438\u043b\u044c\u0442\u0440 \u2014 \u044d\u0442\u043e \u043d\u0435 \u043c\u0433\u043d\u043e\u0432\u0435\u043d\u043d\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430, \u0430 \u043e\u0431\u044a\u0435\u043a\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u00ab\u0437\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u0435\u0442\u00bb \u0443\u0441\u043b\u043e\u0432\u0438\u0435.  \u041f\u0440\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0430\u043f\u0434\u0435\u0439\u0442\u0430 \u044d\u0442\u043e\u0442 \u0444\u0438\u043b\u044c\u0442\u0440 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043a \u043e\u0431\u044a\u0435\u043a\u0442\u0443 (\u0440\u043e\u0443\u0442\u0435\u0440 \u0441\u0430\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u043f\u043e\u0434 \u043a\u0430\u043f\u043e\u0442\u043e\u043c).  \u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434 <code>.resolve(obj)</code>,  \u043d\u043e \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u0432 \u043a\u043e\u0434\u0435 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u2014 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043e\u043f\u0438\u0441\u0430\u0442\u044c \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u0432 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0435, \u0438 \u043e\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043e \u043f\u0440\u0438 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438.</p> <pre><code>@r.message(F.text == \"ping\")\nasync def ping_handler(message):\n    await message.answer(\"pong\")\n</code></pre> <p>\u0417\u0434\u0435\u0441\u044c \u0444\u0438\u043b\u044c\u0442\u0440 <code>F.text == \"ping\"</code> \u0431\u0443\u0434\u0435\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0435\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u0415\u0441\u043b\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442, \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a.</p>"},{"location":"ru/learn/filters/#_3","title":"\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f","text":"<p>\u041e\u0431\u044a\u0435\u043a\u0442 MagicFilter \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u0430\u0434 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430\u043c\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432.</p>"},{"location":"ru/learn/filters/#not-none","title":"\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u043b\u0438 not None","text":"<p>\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e:</p> <pre><code>F.photo  # message.photo\n</code></pre>"},{"location":"ru/learn/filters/#_4","title":"\u0420\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u043e","text":"<pre><code>F.text == \"hello\"        # message.text == \"hello\"\nF.from_user.id == 42     # message.from_user.id == 42\nF.text != \"spam\"         # message.text != \"spam\"\n</code></pre>"},{"location":"ru/learn/filters/#_5","title":"\u041f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0443","text":"<pre><code># query.from_user.id in {42, 1000, 123123}\nF.from_user.id.in_({42, 1000, 123123})\n\n# query.data in {\"foo\", \"bar\", \"baz\"}\nF.data.in_({\"foo\", \"bar\", \"baz\"})       \n</code></pre>"},{"location":"ru/learn/filters/#_6","title":"\u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442","text":"<pre><code>F.text.contains(\"foo\")  # \"foo\" in message.text\n</code></pre>"},{"location":"ru/learn/filters/#_7","title":"\u041d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f/\u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u043e\u0439","text":"<pre><code>F.text.startswith(\"foo\")  # message.text.startswith(\"foo\")\nF.text.endswith(\"bar\")    # message.text.endswith(\"bar\")\n</code></pre>"},{"location":"ru/learn/filters/#_8","title":"\u0420\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f","text":"<pre><code>F.text.regexp(r\"Hello, .+\")  # re.match(r\"Hello, .+\", message.text)\n</code></pre>"},{"location":"ru/learn/filters/#_9","title":"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f","text":"<pre><code># (lambda chat: chat.id == -42)(message.chat)\nF.chat.func(lambda chat: chat.id == -42)  \n</code></pre>"},{"location":"ru/learn/filters/#_10","title":"\u0418\u043d\u0432\u0435\u0440\u0441\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430","text":"<pre><code>~F.text                     # not message.text\n~F.text.startswith(\"spam\")  # not message.text.startswith(\"spam\")\n</code></pre>"},{"location":"ru/learn/filters/#_11","title":"\u041a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u0439","text":"<pre><code>(F.from_user.id == 42) &amp; (F.text == \"admin\")\n\nF.text.startswith(\"a\") | F.text.endswith(\"b\")\n\n(F.from_user.id.in_({42, 777, 911})) &amp; (F.text.startswith(\"!\") | F.text.startswith(\"/\")) &amp; F.text.contains(\"ban\")   \n</code></pre>"},{"location":"ru/learn/filters/#_12","title":"\u041c\u043e\u0434\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 (\u0441\u0442\u0440\u043e\u043a\u0438)","text":"<pre><code>F.text.lower() == \"test\"           # message.text.lower() == \"test\"\nF.text.upper().in_({\"FOO\", \"BAR\"}) # message.text.upper() in {\"FOO\", \"BAR\"}\nF.text.len() == 5                  # len(message.text) == 5\n</code></pre>"},{"location":"ru/learn/getting-started/","title":"\u041d\u0430\u0447\u0430\u043b\u043e \u0440\u0430\u0431\u043e\u0442\u044b","text":"<p>\u041f\u0435\u0440\u0435\u0434 \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0438 \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430:</p> <pre><code>python -m venv .venv\nsource .venv/bin/activate   # Linux / macOS\n.venv\\Scripts\\activate      # Windows PowerShell\n</code></pre>"},{"location":"ru/learn/getting-started/#python-trueconf-bot","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 python-trueconf-bot","text":"<p>\u0427\u0442\u043e\u0431\u044b \u043d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 python-trueconf-bot, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u043e\u0434\u043d\u0438\u043c \u0438\u0437 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432:</p> <ol> <li> <p>\u0418\u0437 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f PyPI:</p> <p><pre><code>pip install python-trueconf-bot\n</code></pre> 2. \u0418\u0437 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0430\u043a\u0435\u0442\u0430 (.whl)</p> <pre><code>pip install python-trueconf-bot.whl\n</code></pre> </li> </ol> <p>Info</p> <p>\u041f\u043e\u0441\u043b\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0431\u0443\u0434\u0443\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u043e\u0434\u0442\u044f\u043d\u0443\u0442\u044b \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438: <code>websockets</code>, <code>httpx</code>, <code>mashumaro</code>, <code>pillow</code>, <code>aiofiles</code>, <code>magic-filter</code>.</p>"},{"location":"ru/learn/getting-started/#-","title":"\u041f\u0435\u0440\u0432\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u044d\u0445\u043e-\u0431\u043e\u0442\u0430","text":"<p>\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u043d\u0443\u0436\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b:</p> <pre><code>from trueconf import Bot, Dispatcher, Router, F\nfrom trueconf.types import Message\n</code></pre> <p>\u0414\u0430\u043b\u0435\u0435 \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u044b Router \u0438 Dispatcher \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u0438\u0445:</p> <pre><code>r = Router()\ndp = Dispatcher()\n# dp.include_router(r)\n</code></pre> <p>\u0411\u043e\u0442 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0434\u0432\u0430 \u0442\u0438\u043f\u0430 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438: \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0443 \u0438\u043b\u0438 \u043f\u043e \u043b\u043e\u0433\u0438\u043d\u0443 \u0438 \u043f\u0430\u0440\u043e\u043b\u044e. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431.</p>"},{"location":"ru/learn/getting-started/#_2","title":"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0443","text":"<p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0443, \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u0435\u0433\u043e, \u043a\u0430\u043a \u043e\u043f\u0438\u0441\u0430\u043d\u043e \u0432 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 API.</p> <p>\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0442\u043e\u043a\u0435\u043d \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u0432 .env-\u0444\u0430\u0439\u043b\u0435. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c .env \u0432 .gitignore, \u0435\u0441\u043b\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\u0435 \u0441 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f\u043c\u0438.</p> <pre><code>from os import getenv\n\nTOKEN = getenv(\"TOKEN\")\nbot = Bot(server=\"video.example.com\", token=TOKEN, dispatcher=dp)\n</code></pre>"},{"location":"ru/learn/getting-started/#_3","title":"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e \u043b\u043e\u0433\u0438\u043d\u0443 \u0438 \u043f\u0430\u0440\u043e\u043b\u044e","text":"<p>\u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u0435\u0442\u043e\u0434 <code>.from_credentials</code>:</p> <pre><code>bot = Bot.from_credentials(\n    username=\"echo_bot\",\n    password=\"123tr\",\n    server=\"10.110.2.240\",\n    dispatcher=dp\n)\n</code></pre> <p>Info</p> <p>\u041f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u0432\u044b\u0437\u043e\u0432\u0435 from_credentials() \u0431\u043e\u0442 \u043e\u0431\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0437\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435\u043c \u043d\u043e\u0432\u043e\u0433\u043e \u0442\u043e\u043a\u0435\u043d\u0430. \u0421\u0440\u043e\u043a \u0436\u0438\u0437\u043d\u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u043e\u043a\u0435\u043d\u0430 \u2014 1 \u043c\u0435\u0441\u044f\u0446.</p>"},{"location":"ru/learn/getting-started/#_4","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439","text":"<p>\u0422\u0435\u043f\u0435\u0440\u044c \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u043e\u0441\u0442\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. \u041e\u043d\u0430 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u0432\u0435\u0447\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0442\u0435\u043c \u0436\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u043c (\u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u00ab\u044d\u0445\u043e-\u0431\u043e\u0442\u00bb):</p> <pre><code>@r.message(F.text)\nasync def echo(message: Message):\n    await message.answer(message.text)\n</code></pre>"},{"location":"ru/learn/getting-started/#_5","title":"\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432\u043d\u0443\u0442\u0440\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 main, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442\u0441\u044f \u0432 asyncio.run():</p> <pre><code>async def main():\n    await bot.run()\n\nimport asyncio\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>\u041f\u043e\u0447\u0435\u043c\u0443 async/await?</p> <p>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 python-trueconf-bot \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0430 \u043d\u0430 asyncio.</p> <p>\u042d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0432\u0441\u0435 \u0441\u0435\u0442\u0435\u0432\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 (\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u043f\u0440\u0438\u0451\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439) \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u2014 \u043d\u0435 \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u043e\u0442\u043e\u043a. \u041f\u043e\u044d\u0442\u043e\u043c\u0443:</p> <ul> <li>\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043f\u0438\u0448\u0443\u0442\u0441\u044f \u043a\u0430\u043a <code>async def</code>,</li> <li>\u0434\u043b\u044f \u0432\u044b\u0437\u043e\u0432\u043e\u0432 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f <code>await</code>,  </li> <li>\u0437\u0430\u043f\u0443\u0441\u043a \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0443\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 <code>asyncio.run(...)</code>.  </li> </ul> <p>\u0422\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0441\u0440\u0430\u0437\u0443 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e, \u0431\u0435\u0437 \u0437\u0430\u0434\u0435\u0440\u0436\u0435\u043a \u0438 \u043f\u043e\u0434\u0432\u0438\u0441\u0430\u043d\u0438\u0439.</p>"},{"location":"ru/learn/parse-messages/","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432","text":""},{"location":"ru/learn/parse-messages/#_2","title":"\u0420\u043e\u0443\u0442\u0435\u0440","text":"<p>\u041f\u0440\u0438 \u043b\u044e\u0431\u043e\u043c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438 \u0441 \u0431\u043e\u0442\u043e\u043c \u2014 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0440\u0438 \u043b\u0438\u0447\u043d\u043e\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0432 \u0433\u0440\u0443\u043f\u043f\u043e\u0432\u043e\u0439 \u0447\u0430\u0442 \u0438\u043b\u0438 \u043a\u0430\u043d\u0430\u043b \u2014 \u0431\u043e\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 (update) \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430.</p> <p>\u0414\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u044d\u0442\u0438\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f <code>Router</code>. \u041e\u043d \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u043a\u0430\u043a\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0437\u0432\u0430\u0442\u044c \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0430\u043f\u0434\u0435\u0439\u0442\u0430. \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439:</p> <pre><code>from trueconf import Router\n\nr = Router()\n</code></pre> <p>\u0427\u0442\u043e\u0431\u044b \u043e\u0442\u043b\u043e\u0432\u0438\u0442\u044c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0441 \u043c\u0435\u0442\u043e\u0434\u043e\u043c <code>SendMessage</code>, \u0444\u0443\u043d\u043a\u0446\u0438\u044e-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043e\u0431\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u044e\u0442 \u0432 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440:</p> <pre><code>@r.message()\nasync def on_message(message): ...\n</code></pre>"},{"location":"ru/learn/parse-messages/#_3","title":"\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432","text":"<p>\u0420\u043e\u0443\u0442\u0435\u0440\u044b \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442 \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 magic-filter. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043e\u0431\u044a\u0435\u043a\u0442 <code>F</code>:</p> <pre><code>from trueconf import F\n</code></pre> <p>\u0424\u0438\u043b\u044c\u0442\u0440\u044b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435 \u0430\u043f\u0434\u0435\u0439\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code># \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c\n@r.message(F.text)\nasync def on_message(message): ...\n\n# \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0441 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u043c\u0438\n@r.message(F.photo)\nasync def on_photo(message): ...\n\n# \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n@r.message(F.from_user.id == \"elisa\")\nasync def on_elisa(message): ...\n</code></pre> <p>Tip</p> <p>\u0411\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0439\u0442\u0438 \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u0424\u0438\u043b\u044c\u0442\u0440\u044b.</p>"},{"location":"ru/learn/parse-messages/#_4","title":"\u0414\u0438\u0441\u043f\u0435\u0442\u0447\u0435\u0440","text":"<p>\u0412\u0441\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0435 \u0440\u043e\u0443\u0442\u0435\u0440\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u0434\u0438\u0441\u043f\u0435\u0442\u0447\u0435\u0440 (Dispatcher). \u0418\u043c\u0435\u043d\u043d\u043e \u043e\u043d \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u0430\u043f\u0434\u0435\u0439\u0442\u043e\u0432:</p> <pre><code>from trueconf import Dispatcher\n\ndp = Dispatcher()\ndp.include_router(r)\n</code></pre>"},{"location":"ru/learn/parse-messages/#_5","title":"\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432","text":"<ul> <li>\u0420\u043e\u0443\u0442\u0435\u0440\u044b \u0438 \u0438\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044e\u0442\u0441\u044f \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0447\u0435\u0440\u0435\u0437 Dispatcher.include_router().</li> <li>\u0412\u043d\u0443\u0442\u0440\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0440\u043e\u0443\u0442\u0435\u0440\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0442\u0430\u043a\u0436\u0435 \u0438\u0434\u0443\u0442 \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f.</li> <li>\u041f\u0440\u0438 \u043f\u0435\u0440\u0432\u043e\u043c \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f, \u0438 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0438\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u044f \u043d\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044e\u0442\u0441\u044f (\u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e).</li> </ul> <p>\u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0441 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c\u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u043c\u0438:</p> <pre><code>@r.message(F.text == \"Hello\")\nasync def handler1(message):\n    await message.answer(\"\u041f\u0435\u0440\u0432\u044b\u0439\")\n\n@r.message(F.text == \"Hello\")\nasync def handler2(message):\n    await message.answer(\"\u0412\u0442\u043e\u0440\u043e\u0439\")\n</code></pre> <p>\u0422\u043e \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e handler1, \u0430 \u0434\u043e handler2 \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0443\u0436\u0435 \u043d\u0435 \u0434\u043e\u0439\u0434\u0451\u0442.</p> <p>\u0427\u0442\u043e\u0431\u044b \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0440\u0430\u0437\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u0438\u043b\u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u0435 \u0438\u0445 \u0432 \u043e\u0434\u0438\u043d \u0441 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439 \u0432\u043d\u0443\u0442\u0440\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438.</p> <p>Tip</p> <p>\u0414\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043b\u043e\u0433\u0438\u043a\u0438 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u0432 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, commands_router, messages_router, admin_router) \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0438\u0445 \u0432 \u0434\u0438\u0441\u043f\u0435\u0442\u0447\u0435\u0440\u0435 \u0432 \u043d\u0443\u0436\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435. \u0422\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u0434 \u0438 \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0431\u043e\u0442\u0430.</p>"},{"location":"ru/learn/parse-messages/#_6","title":"\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u043f\u043e \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u043a\u043e\u0434\u0430","text":"<ul> <li>\u041e\u0431\u044b\u0447\u043d\u043e \u0440\u043e\u0443\u0442\u0435\u0440\u044b \u0432\u044b\u043d\u043e\u0441\u044f\u0442 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, handlers/messages.py), \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u044e\u0442 \u0438\u0445 \u0432 \u0433\u043b\u0430\u0432\u043d\u043e\u043c \u043c\u043e\u0434\u0443\u043b\u0435 \u0431\u043e\u0442\u0430 \u0447\u0435\u0440\u0435\u0437 include_router.</li> <li>\u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043f\u043e \u043e\u0431\u043b\u0430\u0441\u0442\u044f\u043c \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438: \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u0444\u043e\u0442\u043e, \u043a\u043e\u043c\u0430\u043d\u0434\u044b\u0430 \u0438 \u0442. \u0434.</li> <li>\u0414\u0438\u0441\u043f\u0435\u0442\u0447\u0435\u0440 (Dispatcher) \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442, \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u044e\u0449\u0438\u0439 \u043b\u043e\u0433\u0438\u043a\u0443 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0432\u0441\u0435\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439.</li> </ul>"},{"location":"ru/learn/types/","title":"\u0422\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u041f\u0440\u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0432\u0430\u0436\u043d\u043e, \u0447\u0442\u043e\u0431\u044b \u0441\u0440\u0435\u0434\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 (IDE) \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u043b\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u043e\u0432. \u041e\u0434\u043d\u0430\u043a\u043e \u0440\u043e\u0443\u0442\u0435\u0440 (Router) \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0440\u0430\u0437\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u0438 IDE \u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u043c\u043e\u0436\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0438\u0445 \u0442\u0438\u043f. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0435\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u00ab\u043f\u043e\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c\u00bb, \u043a\u0430\u043a\u043e\u0439 \u0438\u043c\u0435\u043d\u043d\u043e \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442.</p> <p>\u0412 python-trueconf-bot \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d \u043f\u0430\u043a\u0435\u0442 <code>trueconf.types</code>, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0432\u0441\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u044b (\u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f). \u0410 \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u2014 <code>trueconf.types.responses</code>.</p> <p>\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:</p> <ul> <li>\u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0441\u043e\u0431\u044b\u0442\u0438\u044f\u043c\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0442\u0438\u043f\u044b \u0438\u0437 <code>trueconf.types</code>;</li> <li>\u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0442\u0438\u043f\u044b \u0438\u0437 <code>trueconf.types.responses</code>.</li> </ul> <p>\u042d\u0442\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442:</p> <ul> <li>\u0430\u0432\u0442\u043e\u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0432 IDE (\u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0438 \u043f\u043e \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430\u043c \u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u043c);</li> <li>\u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u0442\u0438\u043f\u043e\u0432 (type checking) \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e mypy \u0438\u043b\u0438 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432;</li> <li>\u0431\u043e\u043b\u0435\u0435 \u0443\u0434\u043e\u0431\u043d\u0443\u044e \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044e \u043f\u043e \u043a\u043e\u0434\u0443 \u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438.</li> </ul>"},{"location":"ru/learn/types/#_2","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":""},{"location":"ru/learn/types/#_3","title":"\u0421\u043e\u0431\u044b\u0442\u0438\u0435 \u043e \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0432 \u0447\u0430\u0442","text":"<p>\u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u043e \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043d\u043e\u0432\u043e\u0433\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0432 \u0447\u0430\u0442 (1): </p> <ol> <li>\u0421\u043e\u0433\u043b\u0430\u0441\u043d\u043e API, \u044d\u0442\u043e \u0437\u0430\u043f\u0440\u043e\u0441 \u0441 <code>\"method\": \"addChatParticipant\"</code>.</li> </ol> <pre><code>from trueconf import Router\n\nr = Router()\n\n@r.added_chat_participant()\nasync def on_added_user(event): ...\n</code></pre> <p>\u0427\u0442\u043e\u0431\u044b IDE \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u043b\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u043e\u0431\u044a\u0435\u043a\u0442\u0430 event, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445:</p> <pre><code>from trueconf import Router\nfrom trueconf.types import AddedChatParticipant\n\nr = Router()\n\n@r.added_chat_participant()\nasync def on_added_user(event: AddedChatParticipant):\n    who_add = event.added_by\n</code></pre> <p>\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435:</p> <ul> <li><code>AddedChatParticipant</code> \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u0431\u044b\u0442\u0438\u044f,</li> <li>\u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0435 \u0443\u0434\u043e\u0431\u043d\u043e\u0435 \u0430\u0432\u0442\u043e\u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0432 IDE,</li> <li>\u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, mypy) \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a \u043f\u043e\u043b\u044f\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u0430.</li> </ul>"},{"location":"ru/learn/types/#_4","title":"\"\u0421\u044b\u0440\u043e\u0435\" \u0441\u043e\u0431\u044b\u0442\u0438\u0435","text":"<p>\u041f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0430 @.event \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0435 \u0434\u043e\u0441\u0442\u0443\u043f \u043a\u043e \u0432\u0441\u0435\u043c \u043f\u043e\u043b\u044f\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u044f, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0442\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u044b\u0447\u043d\u043e \u0441\u043a\u0440\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043f\u0440\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0438 JSON \u0432 \u043a\u043b\u0430\u0441\u0441: <p><pre><code>{\n  \"method\": \"name\",\n  \"type\": 1,\n  \"id\": 11,\n  \"payload\": {}\n}\n</code></pre> \u0412 \u0442\u0430\u043a\u043e\u0439 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438 \u043b\u0443\u0447\u0448\u0435 \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c\u0441\u044f \u043a <code>trueconf.types.Update</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f, \u043f\u0440\u0438\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430.</p> <pre><code>from trueconf import Router\nfrom trueconf.types import Update\nfrom trueconf.enums import IncomingUpdateMethod\n\nr = Router()\n\n@r.event()\nasync def raw_event(event: Update):\n    if event.method == IncomingUpdateMethod.MESSAGE:\n        pass\n\n    # Alternatively, without importing enum\n    if event.method == \"SendMessage\":\n        pass\n</code></pre>"}]}